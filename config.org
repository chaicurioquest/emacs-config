#+TITLE: Emacs Literate Config
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+DATE: 2025-07-12

* Purpose
This Org-mode configuration is the single source for my Emacs 30 setup, designed to be:
- **Future-proof**: Structured with comments, tables, CANCELLED blocks.
- **Reliable**: Reproducible packages via straight.el, lazy loading.
- **Minimal**: Single config.org, minimal hooks/keybindings, early-init.el for GUI, unified tag management.
- **Portable**: Device-specific settings (laptop, Termux, tablet) via device.el.
- **Synced**: Via GitHub (https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Modular**: Uses org/ for snippets (yankpad.org), workflows (workflows.org), and note-taking (org-roam.org).
Tangle with `C-c t` or `M-x my-tangle-config-org`.

* My Digital Workflow
| *Workflow*                          | *Solution*                                         | *Notes*                                                        | *Device* | *Keybindings*         |
|-------------------------------------+----------------------------------------------------+----------------------------------------------------------------|----------|-----------------------|
| Installing packages                 | use-package with straight.el                       | Lazy loading in config.org, org/workflows.org                  | All      | None                  |
| Filter Org files                    | sparse trees                                       | C-c / for sparse tree                                          | All      | C-c /                 |
| Focus on Org sub-hierarchy          | org-tree-to-indirect-buffer                        |                                                                | All      | C-c C-x b             |
| Enhanced search/selection           | ivy, swiper, counsel (laptop only)                  | In org/workflows.org                                           | Laptop   | C-c C-r, C-c s, C-c c |
| Switching buffers                   | ibuffer                                            |                                                                | All      | C-x C-b               |
| Inserting date/time-stamps          | my-insert-timestamp(), my-insert-datestamp()       |                                                                | All      | C-c i t, C-c i d      |
| Org to PDF export                   | Org mode export via LaTeX                          | Requires pdf-tools in org/workflows.org                        | Laptop   | C-c C-e l p           |
| Passwords                           | org-crypt                                          |                                                                | All      | None                  |
| Snippet management                  | yankpad with yasnippet                             | Org-style snippets in yankpad.org, tab-completion             | All      | C-c y, C-c Y, C-c TAB |
| Spell checking                      | flyspell with aspell                               | Requires aspell installation                                   | All      | M-$                   |
| PDF reading/annotating              | pdf-tools                                          | In org/workflows.org, laptop only                              | Laptop   | None                  |
| Record screencasts                  | gif-screencast                                     | In org/workflows.org, laptop only                              | Laptop   | C-c g                 |
| Zettelkasten note-taking            | org-roam                                           | In org/org-roam.org, graph UI on laptop                        | All      | C-c r n, C-c r f, C-c r g |
| Tag Org sections                    | .filetags                                          | In config.org, tag completion with ivy/completing-read         | All      | C-c f t               |
* ACTIVE Startup Optimizations
;; modular org files tangle process.Tangling only happens when the .org file is newer than the .el file. Each .el file is loaded once after tangling.
#+BEGIN_SRC emacs-lisp
(defun my/tangle-if-needed (org-file el-file)
  "Tangle ORG-FILE to EL-FILE if needed, and load EL-FILE.
Deletes EL-FILE before tangling to ensure sync.
Skips load if no blocks tangled."
  (let* ((org-path (expand-file-name org-file user-emacs-directory))
         (el-path (expand-file-name el-file user-emacs-directory)))
    (when (or (not (file-exists-p el-path))
              (file-newer-than-file-p org-path el-path))
      (message "üîÑ Tangling %s ‚Üí %s" org-path el-path)
      (require 'org)
      (when (file-exists-p el-path)
        (delete-file el-path))
      (org-babel-tangle-file org-path el-path)) 
    (if (file-exists-p el-path)
        (load el-path)
      (message "‚ö†Ô∏è No tangled output: %s not found (possibly all blocks :tangle no)" el-path))))

;; Debug startup (toggle with MY_DEBUG_DEVICE environment variable).
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTING CONFIG ==="))

;; Reset garbage collection threshold to 2MB after startup.
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 2 1000 1000))))

;; Disable startup screen.
(setq inhibit-startup-screen t)

;; Load device detection.
(condition-case err
    (load (expand-file-name "device.el" user-emacs-directory))
  (error (message "‚ùå Failed to load device.el: %s" (error-message-string err))))


;; Set default directory per device.
(setq default-directory
      (cond ((eq my-device 'laptop) "~/wspace/org/notes/")
            ((eq my-device 'termux) "~/storage/shared/notes/")
            ((eq my-device 'tablet) "~/path/to/tablet/notes/")
            (t "~")))
(message "üìÅ Default directory set to: %s" default-directory)

;; Debug: Confirm startup.
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTUP OPTIMIZATIONS COMPLETE ==="))
#+END_SRC

* ACTIVE Package Management
Configure package managers and lightweight, universal packages with lazy loading.
Heavy or laptop-specific packages are in org/workflows.org; org-roam and bibliographic tools in org/org-roam.org; filetags in org/filetags.org.

| Package         | Purpose                              | Device     | Keybindings            | Loading Trigger    |
|------------------+----------------------------------------+-------------+--------------------------+---------------------|
| org              | Core Org-mode                         | All         | Org-mode keys           | Built-in            |
| org-roam         | Zettelkasten note-taking              | All         | C-c r n, r f, r i, r g   | Startup             |
| org-roam-bibtex  | Zotero/BibTeX citation capture        | All         |                         | org-roam-mode hook  |
| citar            | Bibliography interface                | All         | C-c r c                  | On demand           |
| org-roam-ui      | Graphical note graph (web UI)         | Laptop only | C-c r g                  | M-x or keybinding   |
| f                | File/directory manipulation           | All         | None                     | On demand           |
| ht               | Hash table utilities                  | All         | None                     | On demand           |
| ibuffer          | Buffer management                     | All         | C-x C-b                  | C-x C-b             |
| org-crypt        | Password encryption                   | All         | None                     | org-mode hook       |
| yasnippet        | Snippet framework                     | All         | C-c TAB                  | C-c TAB             |
| yankpad          | Org-style snippet library             | All         | C-c y, C-c Y             | C-c y               |
| flyspell         | Spell checking                        | All         | M-$                      | M-$                 |

;; (use-package org
;;;;  :straight nil)  ;; ‚úÖ Don't let straight.el manage org


#+BEGIN_SRC emacs-lisp

;; Ensure use-package is available.
(eval-when-compile
  (require 'use-package))

;; File manipulation library (loaded on demand).
(use-package f
  :straight t
  :defer t)

;; Hash table utilities (loaded on demand).
(use-package ht
  :straight t
  :defer t)

;; Ibuffer for buffer management (loaded on C-x C-b).
(use-package ibuffer
  :straight t
  :defer t
  :bind ("C-x C-b" . ibuffer))

(use-package org-crypt
  :ensure nil                        ;; Do not install from ELPA
  :straight nil                      ;; Do not use straight.el
  :defer t                           ;; Load when needed (on demand)
  :config
  (setq org-crypt-use-before-save nil) ;; Optional: prevent auto-encryption on save
  (require 'org-crypt))

;; Flyspell for spell checking (loaded on M-$).
(use-package flyspell
  :straight t
  :defer t
  :bind ("M-$" . flyspell-correct-word-before-point)
  :config
  (when (executable-find "aspell")
    (setq ispell-program-name "aspell")))

(use-package yasnippet
  :straight t
  :bind ("C-c TAB" . yas-expand)
  :config
  (yas-global-mode 1)
  (setq yas-indent-line 'fixed))  ;; It preserves the indentation of snippet exactly as written in the template.

;; üìò Yankpad: Org-mode snippet library on top of Yasnippet
(use-package yankpad
  :straight t
  :bind (("C-c Y" . yankpad-expand)
         ("C-c y" . yankpad-insert))
  :init
  ;; yankpad-reload is added to the org-mode-hook only after Yankpad is loaded.
  (with-eval-after-load 'yankpad
    (add-hook 'org-mode-hook #'yankpad-reload))
  :config
;; Define yankpad.org location based on device
  (setq yankpad-file
      (cond
       ((eq my-device 'laptop)
        (expand-file-name "org/yankpad.org" user-emacs-directory))
       ((eq my-device 'termux)
        (expand-file-name "storage/shared/notes/yankpad.org"))
       ((eq my-device 'tablet)
        (expand-file-name "path/to/tablet/notes/yankpad.org"))
       (t expand-file-name "org/yankpad.org" user-emacs-directory))))  ;; fallback

;; Install the MELPA sqlite3 package
(use-package emacsql-sqlite3
  :straight t
  :defer t)

* Completion and Minibuffer Enhancements.
;; Work well with org-roam (and Emacs in general) much faster, more flexible, and user-friendly. 
;; Vertico: vertical completion UI
(use-package vertico
  :straight t
  :defer t)
  :init
  (vertico-mode))

;; Orderless: smart fuzzy matching for completion
(use-package orderless
  :straight t
  :defer t)
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

;; Consult: enhanced commands (search, buffer switch, etc.).Powerful, fast, and flexible search/navigation UI for working with Org-roam and Emacs in general.It can be enabled later for future optimization.
;;(use-package consult
;;;;  :straight t
;;  :bind
;;  (("C-s" . consult-line)
;;   ("C-c h" . consult-org-heading)
;;   ("C-c k" . consult-ripgrep)
;;   ("C-c b" . consult-buffer)))






#+END_SRC

* ACTIVE UI Tweaks
#+BEGIN_SRC emacs-lisp
(when (eq my-device 'termux)
  (set-fringe-mode 0)
  (setq mouse-wheel-progressive-speed nil))
#+END_SRC

* ACTIVE General Settings
#+BEGIN_SRC emacs-lisp
;; Profiling
(defvar my-config-el-start-time (current-time) "Time when config.el was started")
(setq my-config-el-start-time-iso (format-time-string "%Y-%m-%dT%T%:z"))
;; UI Theme, word wrap and other settings.
(load-theme 'tsdh-dark t)  ;;Dark theme for Emacs
(global-visual-line-mode 1) ;;Wrap text in GUI Windows
(set-fringe-mode 10) ;;Sets the width of the left and right fringes (the empty margin space at the edge of windows in Emacs) to 10 pixels.
(setq-default cursor-type 'bar) ;;Changes the default cursor shape to a vertical bar (instead of the default box).

;; Device-specific backup directory under default-directory
(defvar my-backup-dir (expand-file-name ".backups/" default-directory)
  "Directory to store Emacs backup (~) files.")

;; Create backup directory if it doesn't exist
(unless (file-exists-p my-backup-dir)
  (make-directory my-backup-dir t))
(setq backup-directory-alist `((".*" . ,my-backup-dir))
      version-control nil
      delete-old-versions t
      make-backup-files t
      backup-by-copying t)

(defvar my-autosave-dir (expand-file-name ".autosaves/" default-directory)
  "Directory to store Emacs auto-save files.")

;; Create autosave directory if missing
(unless (file-exists-p my-autosave-dir)
  (make-directory my-autosave-dir t))

;; Redirect auto-save files to device-specific location
(setq auto-save-file-name-transforms
      `((".*" ,my-autosave-dir t))
      auto-save-default t)

;; Calendar: Monday as start of week
(setq-default calendar-week-start-day 1)

;; Sentences: No double space after periods
(setq-default sentence-end-double-space nil)

;; Truncate lines
(setq-default truncate-lines t)

;; Read-only files in view mode
(setq view-read-only t)

;; Timestamp functions
(defun my-insert-timestamp ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
(defun my-insert-datestamp ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

;; Added 2025-07-15: Allow alphabetical list continuation (1.a, 1.b, 1.c., ...)
(setq org-list-allow-alphabetical t)
#+END_SRC

* ACTIVE Keybindings
#+BEGIN_SRC emacs-lisp
;; Tangle shortcut
(global-set-key (kbd "C-c t") (lambda ()
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (message "‚úÖ config.org tangled")))

;; Timestamp keybindings
(global-set-key (kbd "C-c i t") 'my-insert-timestamp)
(global-set-key (kbd "C-c i d") 'my-insert-datestamp)

;; Added 2025-07-15: Org-mode specific keybinding for toggling items
(define-key org-mode-map (kbd "C-c i i") 'org-toggle-item)

#+END_SRC


* ACTIVE Modular Configs
#+BEGIN_SRC emacs-lisp
(my/tangle-if-needed "org/filetags.org" "org/filetags.el")
(load (expand-file-name "org/filetags.el" user-emacs-directory) nil 'nomessage)

(my/tangle-if-needed "org/org-roam.org" "org/org-roam.el")
(load (expand-file-name "org/org-roam.el" user-emacs-directory) nil 'nomessage)

;;(my/tangle-if-needed "org/workflows.org" "org/workflows.el")
;;(load (expand-file-name "org/workflows.el" user-emacs-directory) nil 'nomessage)
#+END_SRC

* ACTIVE Startup Confirmation
#+BEGIN_SRC emacs-lisp
(message "‚úÖ config.el loaded successfully on device: %s" my-device)
#+END_SRC

* CANCELLED Deprecated Settings
#+BEGIN_SRC emacs-lisp
;; Old timestamp code for Emacs < 27.1
;; (setq my-config-el-start-time-iso
;;       (concat (format-time-string "%Y-%m-%dT%T")
;;               ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
;;                (format-time-string "%z"))))
#+END_SRC