#+TITLE: Emacs Literate Config
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+DATE: 2025-07-12

* Purpose
This Org-mode configuration is the single source for my Emacs 28.1 setup, designed to be:
- **Future-proof**: Structured with comments, tables, CANCELLED blocks.
- **Reliable**: Reproducible packages via straight.el, lazy loading.
- **Minimal**: Single config.org, minimal hooks/keybindings, early-init.el for GUI, unified tag management.
- **Portable**: Device-specific settings (laptop, Termux, tablet) via device.el.
- **Synced**: Via GitHub (https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Modular**: Uses org/ for snippets (yankpad.org), workflows (workflows.org), and note-taking (org-roam.org).
Tangle with `C-c t` or `M-x my-tangle-config-org`.

* My Digital Workflow
| *Workflow*                          | *Solution*                                         | *Notes*                                                        | *Device* | *Keybindings*         |
|-------------------------------------+----------------------------------------------------+----------------------------------------------------------------|----------|-----------------------|
| Installing packages                 | use-package with straight.el                       | Lazy loading in config.org, org/workflows.org                  | All      | None                  |
| Filter Org files                    | sparse trees                                       | C-c / for sparse tree                                          | All      | C-c /                 |
| Focus on Org sub-hierarchy          | org-tree-to-indirect-buffer                        |                                                                | All      | C-c C-x b             |
| Enhanced search/selection           | ivy, swiper, counsel (laptop only)                  | In org/workflows.org                                           | Laptop   | C-c C-r, C-c s, C-c c |
| Switching buffers                   | ibuffer                                            |                                                                | All      | C-x C-b               |
| Inserting date/time-stamps          | my-insert-timestamp(), my-insert-datestamp()       |                                                                | All      | C-c i t, C-c i d      |
| Org to PDF export                   | Org mode export via LaTeX                          | Requires pdf-tools in org/workflows.org                        | Laptop   | C-c C-e l p           |
| Passwords                           | org-crypt                                          |                                                                | All      | None                  |
| Snippet management                  | yankpad with yasnippet                             | Org-style snippets in yankpad.org, tab-completion             | All      | C-c y, C-c Y, C-c TAB |
| Spell checking                      | flyspell with aspell                               | Requires aspell installation                                   | All      | M-$                   |
| PDF reading/annotating              | pdf-tools                                          | In org/workflows.org, laptop only                              | Laptop   | None                  |
| Record screencasts                  | gif-screencast                                     | In org/workflows.org, laptop only                              | Laptop   | C-c g                 |
| Zettelkasten note-taking            | org-roam                                           | In org/org-roam.org, graph UI on laptop                        | All      | C-c r n, C-c r f, C-c r g |
| Tag Org sections                    | .filetags                                          | In config.org, tag completion with ivy/completing-read         | All      | C-c f t               |

* ACTIVE Startup Optimizations
;; modular org files tangle process.Tangling only happens when the .org file is newer than the .el file. Each .el file is loaded once after tangling.
#+BEGIN_SRC emacs-lisp
(defun my/tangle-if-needed (org-file el-file)
  "Tangle ORG-FILE to EL-FILE if needed, and load EL-FILE.
Deletes EL-FILE before tangling to ensure sync.
Skips load if no blocks tangled."
  (let* ((org-path (expand-file-name org-file user-emacs-directory))
         (el-path (expand-file-name el-file user-emacs-directory)))
    (when (or (not (file-exists-p el-path))
              (file-newer-than-file-p org-path el-path))
      (message "üîÑ Tangling %s ‚Üí %s" org-path el-path)
      (require 'org)
      (when (file-exists-p el-path)
        (delete-file el-path))
      (org-babel-tangle-file org-path el-path))
    (if (file-exists-p el-path)
        (load el-path)
      (message "‚ö†Ô∏è No tangled output: %s not found (possibly all blocks :tangle no)" el-path))))

;; Debug startup (toggle with MY_DEBUG_DEVICE environment variable).
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTING CONFIG ==="))

;; Reset garbage collection threshold to 2MB after startup.
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 2 1000 1000))))

;; Disable startup screen.
(setq inhibit-startup-screen t)

;; Load device detection.
(condition-case err
    (load (expand-file-name "device.el" user-emacs-directory))
  (error (message "‚ùå Failed to load device.el: %s" (error-message-string err))))


;; Set default directory per device.
(setq default-directory
      (cond ((eq my-device 'laptop) "~/wspace/org/notes/")
            ((eq my-device 'termux) "~/storage/shared/notes/")
            ((eq my-device 'tablet) "~/path/to/tablet/notes/")
            (t "~")))
(message "üìÅ Default directory set to: %s" default-directory)

;; Debug: Confirm startup.
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTUP OPTIMIZATIONS COMPLETE ==="))
#+END_SRC

* ACTIVE Tag Management
#+BEGIN_SRC emacs-lisp
(defun my-org--filetags-path ()
  "Return actual .filetags path depending on the device."
  (let ((link (expand-file-name "org/.filetags" user-emacs-directory)))
    (cond
     ((file-symlink-p link) (file-truename link))
     ((file-exists-p link) link)
     ((eq my-device 'laptop) "~/.filetags")
     ((eq my-device 'termux) "~/storage/shared/.filetags")
     ((eq my-device 'tablet) "~/path/to/tablet/.filetags")
     (t "~/.filetags"))))

(defun my-org-read-filetags ()
  "Read tags from .filetags file as a flat list, skipping comments and empty lines."
  (let ((file (my-org--filetags-path))
        (tags '()))
    (when (file-exists-p file)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (while (not (eobp))
          (let* ((line (buffer-substring-no-properties (line-beginning-position)
                                                       (line-end-position)))
                 ;; Strip comments after `#`
                 (clean (car (split-string line "#")))
                 (words (split-string (string-trim clean) "\\s-+" t)))
            (dolist (tag words)
              (push tag tags)))
          (forward-line 1))))
    (delete-dups (nreverse tags))))

(defun my-org-dynamic-tags ()
  "Return pipe-separated tag string from .filetags for Yankpad/Yasnippet use."
  (let ((tags (my-org-read-filetags)))
    (if tags
        (string-join tags "|")
      "")))

(defun my-org-set-filetags ()
  "Set multiple filetags on current Org heading with completion."
  (interactive)
  (require 'org)
  (let* ((all-tags (my-org-read-filetags))
         (current-tags (org-get-tags nil t))
         (completion-function
          (cond
           ((and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
            (lambda (prompt choices)
              (ivy-read prompt choices
                        :require-match t
                        :initial-input ""
                        :preselect (car current-tags)
                        :multi-action t)))
           ((fboundp 'completing-read-multiple)
            (lambda (prompt choices)
              (completing-read-multiple prompt choices nil t)))
           (t (lambda (prompt choices)
                (list (completing-read prompt choices nil t))))))
         (selected-tags (funcall completion-function "Select tags: " all-tags)))
    (org-set-tags selected-tags)))

(global-set-key (kbd "C-c f t") 'my-org-set-filetags)
#+END_SRC


* ACTIVE Package Management
Configure package managers and lightweight, universal packages with lazy loading.
Heavy or laptop-specific packages are in org/workflows.org; org-roam in org/org-roam.org; filetags in org/filetags.org.
| Package      | Purpose                     | Device  | Keybindings         | Loading Trigger |
|--------------|-----------------------------|---------|---------------------|-----------------|
| f            | File/directory manipulation | All     | None                | On demand       |
| ht           | Hash table utilities        | All     | None                | On demand       |
| ibuffer      | Buffer management           | All     | C-x C-b             | C-x C-b         |
| org-crypt    | Password encryption         | All     | None                | org-mode hook   |
| yasnippet    | Snippet framework           | All     | C-c TAB             | C-c TAB         |
| yankpad      | Snippet management          | All     | C-c y               | C-c y           |
| flyspell     | Spell checking              | All     | M-$                 | M-$             |

#+BEGIN_SRC emacs-lisp
;; Configure package.el as a fallback for straight.el.
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

;; Bootstrap straight.el for reproducible package management.
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)

;; Ensure use-package is available.
(eval-when-compile
  (require 'use-package))

;; File manipulation library (loaded on demand).
(use-package f
  :ensure t
  :straight t
  :defer t)

;; Hash table utilities (loaded on demand).
(use-package ht
  :ensure t
  :straight t
  :defer t)

;; Ibuffer for buffer management (loaded on C-x C-b).
(use-package ibuffer
  :ensure t
  :straight t
  :defer t
  :bind ("C-x C-b" . ibuffer))

;; Org-crypt for password encryption (built-in, loaded on demand).
(use-package org-crypt
  :ensure nil
  :straight (:type built-in)
  :defer t
  :config
  (condition-case err
      (progn
        (require 'org-crypt)
        (setq org-crypt-use-before-save nil))  ;; Disable automatic encryption
    (error (message "Failed to load org-crypt: %s" err))))

;; Flyspell for spell checking (loaded on M-$).
(use-package flyspell
  :ensure t
  :straight t
  :defer t
  :bind ("M-$" . flyspell-correct-word-before-point)
  :config
  (when (executable-find "aspell")
    (setq ispell-program-name "aspell")))

(use-package yasnippet
  :ensure t
  :straight t
  :bind ("C-c TAB" . yas-expand)
  :config
  (yas-global-mode 1)
  (setq yas-indent-line 'fixed))  ;; It preserves the indentation of snippet exactly as written in the template.

;; üìò Yankpad: Org-mode snippet library on top of Yasnippet
(use-package yankpad
  :ensure t
  :straight t
  :bind (("C-c Y" . yankpad-expand)
         ("C-c y" . yankpad-insert))
  :init
  ;; yankpad-reload is added to the org-mode-hook only after Yankpad is loaded.
  (with-eval-after-load 'yankpad
    (add-hook 'org-mode-hook #'yankpad-reload))
  :config
  ;; Define yankpad.org location based on device
  (setq yankpad-file
      (cond
       ((eq my-device 'laptop)
        (expand-file-name "org/yankpad.org" user-emacs-directory))
       ((eq my-device 'termux)
        (expand-file-name "storage/shared/notes/yankpad.org"))
       ((eq my-device 'tablet)
        (expand-file-name "path/to/tablet/notes/yankpad.org"))
       (t expand-file-name "org/yankpad.org" user-emacs-directory))))  ;; fallback
#+END_SRC

* ACTIVE UI Tweaks
#+BEGIN_SRC emacs-lisp
(when (eq my-device 'termux)
  (set-fringe-mode 0)
  (setq mouse-wheel-progressive-speed nil))
#+END_SRC

* ACTIVE General Settings
#+BEGIN_SRC emacs-lisp
;; Profiling
(defvar my-config-el-start-time (current-time) "Time when config.el was started")
(setq my-config-el-start-time-iso (format-time-string "%Y-%m-%dT%T%:z"))
;; UI Theme, word wrap and other settings.
(load-theme 'tsdh-dark t)  ;;Dark theme for Emacs
(global-visual-line-mode 1) ;;Wrap text in GUI Windows
(set-fringe-mode 10) ;;Sets the width of the left and right fringes (the empty margin space at the edge of windows in Emacs) to 10 pixels.
(setq-default cursor-type 'bar) ;;Changes the default cursor shape to a vertical bar (instead of the default box).

;; Device-specific backup directory under default-directory
(defvar my-backup-dir (expand-file-name ".backups/" default-directory)
  "Directory to store Emacs backup (~) files.")

;; Create backup directory if it doesn't exist
(unless (file-exists-p my-backup-dir)
  (make-directory my-backup-dir t))
(setq backup-directory-alist `((".*" . ,my-backup-dir))
      version-control nil
      delete-old-versions t
      make-backup-files t
      backup-by-copying t)

(defvar my-autosave-dir (expand-file-name ".autosaves/" default-directory)
  "Directory to store Emacs auto-save files.")

;; Create autosave directory if missing
(unless (file-exists-p my-autosave-dir)
  (make-directory my-autosave-dir t))

;; Redirect auto-save files to device-specific location
(setq auto-save-file-name-transforms
      `((".*" ,my-autosave-dir t))
      auto-save-default t)

;; Calendar: Monday as start of week
(setq-default calendar-week-start-day 1)

;; Sentences: No double space after periods
(setq-default sentence-end-double-space nil)

;; Truncate lines
(setq-default truncate-lines t)

;; Read-only files in view mode
(setq view-read-only t)

;; Timestamp functions
(defun my-insert-timestamp ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
(defun my-insert-datestamp ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
#+END_SRC

* ACTIVE Keybindings
#+BEGIN_SRC emacs-lisp
;; Tangle shortcut
(global-set-key (kbd "C-c t") (lambda ()
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (message "‚úÖ config.org tangled")))

;; Timestamp keybindings
(global-set-key (kbd "C-c i t") 'my-insert-timestamp)
(global-set-key (kbd "C-c i d") 'my-insert-datestamp)
#+END_SRC

* ACTIVE Modular Configs
#+BEGIN_SRC emacs-lisp
;;(my/tangle-if-needed "org/org-roam.org" "org/org-roam.el")
(my/tangle-if-needed "org/workflows.org" "org/workflows.el")
#+END_SRC

* ACTIVE Startup Confirmation
#+BEGIN_SRC emacs-lisp
(message "‚úÖ config.el loaded successfully on device: %s" my-device)
#+END_SRC

* CANCELLED Deprecated Settings
#+BEGIN_SRC emacs-lisp
;; Old timestamp code for Emacs < 27.1
;; (setq my-config-el-start-time-iso
;;       (concat (format-time-string "%Y-%m-%dT%T")
;;               ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
;;                (format-time-string "%z"))))
#+END_SRC