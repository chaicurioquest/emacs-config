# SETUPFILE: /wspace/org/setup/setup-latex.org
#+TITLE: Emacs Literate Config
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+DATE: \today
#+FILETAGS: ::
#+OPTIONS: toc:t num:nil
# OPTIONS: toc:nil num:2
#+PROPERTY: header-args :eval never-export
#+CREATED: 2025-07-12
#+LAST_MODIFIED: [2025-08-12 Tue 16:06]


* Purpose
This Org-mode configuration is the single source for my Emacs 30 setup, designed to be:
- **Future-proof**: Structured with comments, tables, CANCELLED blocks.
- **Reliable**: Reproducible packages via straight.el, lazy loading.
- **Minimal**: Single config.org, minimal hooks/keybindings, early-init.el for GUI, unified tag management.
- **Portable**: Device-specific settings (laptop, Termux, tablet) via device.el.
- **Synced**: Via GitHub[](https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Modular**: Uses org/ for snippets (yankpad.org), org-extension (orgxtn.org),  workflows (workflows.org), and note-taking (**roam.org**).  **<-- Updated reference for consistency with file rename**
Tangle with `C-c t` or `M-x my-tangle-config-org`.

* My Digital Workflow :workflow:
| Workflow                     | Solution                          | Notes                                                                 | Device     | Keybindings                          |
|------------------------------|-----------------------------------|-----------------------------------------------------------------------|------------|--------------------------------------|
| Installing packages          | use-package with straight.el      | Lazy loading in config.org; workflows.org optional (commented)        | All        | None                                 |
| Filter Org files             | sparse trees                      | Built-in Org feature for filtering headings                           | All        | C-c /                                |
| Focus on Org sub-hierarchy   | org-tree-to-indirect-buffer       | Built-in Org for narrowing to subtree                                 | All        | C-c C-x b                            |
| Enhanced search/selection    | vertico, orderless                | Vertical completion and fuzzy matching; Ivy optional in workflows.org (commented) | All    | None (uses Vertico for completion)   |
| Switching buffers            | ibuffer                           | Improved buffer list management                                       | All        | C-x C-b                              |
| Inserting date/time-stamps   | my-insert-timestamp(), my-insert-datestamp(), my-insert-org-timestamp() | Custom functions for timestamps (including Org format)              | All        | C-c i t, C-c i d, C-c i o           |
| Org to PDF export            | Org mode export via LaTeX (AUCTeX)| Uses auctex, reftex for refs; pdf-tools for viewing; configured in org/orgxtn.org | All/Laptop | C-c C-e l p                          |
| Passwords                    | org-crypt                         | Encrypt Org sections                                                  | All        | None                                 |
| Snippet management           | yankpad with yasnippet            | Org-style snippets in yankpad.org, tab-completion                     | All        | C-c y (insert), C-c Y (expand), C-c TAB |
| Spell checking               | flyspell with aspell              | Requires aspell; M-$ for correction                                   | All        | M-$                                  |
| PDF reading/annotating       | pdf-tools, org-noter              | pdf-tools for viewing/highlighting; org-noter for synced annotations in notes | Laptop/All | None (M-x org-noter for annotations) |
| PDF side preview             | my/org-pdf-vertical-view          | Opens corresponding PDF in right split for quick view; configured in org/orgxtn.org | All | C-c v                                |
| Record screencasts           | gif-screencast                    | Optional in workflows.org (commented out)                             | Laptop     | C-c g                                |
| Zettelkasten note-taking     | org-roam                          | In org/roam.org; graph UI on laptop; dailies capture; backlinking with IDs | All   | C-c r n (capture), C-c r f (find), C-c r g (UI), C-c r d (dailies) |
| Bibliography/Citations       | citar, org-roam-bibtex            | Zotero integration; insert citations; bib notes in roam               | All        | C-c r c (open note/resource)         |
| Inserting citations          | citar-insert-citation             | Inserts BibTeX citations with Citar                                   | All        | C-c i c                              |
| Tag Org sections             | .filetags                         | In org/filetags.org; tag completion with Vertico                      | All        | C-c f t                              |
| Tangling config              | org-babel-tangle, my-tangle-all   | Tangles config.org or all modular files                               | All        | C-c t (single), C-c T (all)          |
| Org capture                  | org-capture                       | Captures generic notes using template; configured in org/orgxtn.org | All  | C-c c                                |
| Toggle Org items             | org-toggle-item                   | Converts text to/from list items                                      | All        | C-c i i                              |
| Window navigation/switching  | windmove, winner-mode, ace-window | Smart movement between windows; undo/redo layouts; fast jumping       | All        | Shift+Arrow (move), C-c left/right (undo/redo), M-o (ace jump) |
| Executing code blocks        | Org Babel                         | Enables shell and other languages in Org files; configured in org/orgxtn.org | All | C-c C-c (in block)                   |

* ACTIVE Startup Optimizations
;; modular org files tangle process.Tangling only happens when the .org file is newer than the .el file. Each .el file is loaded once after tangling.

#+BEGIN_SRC emacs-lisp
(defun my/tangle-if-needed (org-file el-file)
  "Tangle ORG-FILE to EL-FILE if needed, and load EL-FILE.
Skips if no changes; handles errors gracefully without deleting files."
  (let* ((org-path (expand-file-name org-file user-emacs-directory))
         (el-path (expand-file-name el-file user-emacs-directory)))
    (condition-case err
        (when (or (not (file-exists-p el-path))
                  (file-newer-than-file-p org-path el-path))
          (message "[%s] Tangling %s → %s" (format-time-string "%T") org-path el-path)
          (require 'org)
          (org-babel-tangle-file org-path el-path)
          (message "[%s] Tangled %s" (format-time-string "%T") el-path))
      (error (message "[%s] Tangling failed for %s: %s" (format-time-string "%T") org-path (error-message-string err))))
    (when (file-exists-p el-path)
      (load el-path nil 'nomessage)
      (message "[%s] Loaded %s" (format-time-string "%T") el-path))))
#+END_SRC

** Debug startup (toggle with MY_DEBUG_DEVICE environment variable).
#+BEGIN_SRC emacs-lisp
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTING CONFIG ==="))
#+END_SRC
** Reset garbage collection threshold to 2MB after startup.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda () (setq gc-cons-threshold (* 2 1000 1000))))
#+END_SRC

** Disable startup screen.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Load device detection.
#+BEGIN_SRC emacs-lisp
(condition-case err
    (load (expand-file-name "device.el" user-emacs-directory))
  (error (message "❌ Failed to load device.el: %s" (error-message-string err))))
#+END_SRC

** Set default directory per device.
#+BEGIN_SRC emacs-lisp
(setq default-directory
      (cond ((eq my-device 'laptop) (expand-file-name "org/" "/wspace/"))
            ((eq my-device 'tablet) (expand-file-name "org/" (getenv "HOME")))
            ((eq my-device 'phone) (expand-file-name "storage/org" (getenv "HOME")))
            (t (getenv "HOME"))))
(message "📁 Default directory set to: %s" default-directory)
#+END_SRC

** Global Variables
#+BEGIN_SRC emacs-lisp
(defvar setupfile
  (expand-file-name "setup/setup-latex.org" default-directory)
  "Path to default Org LaTeX setup file.")
#+END_SRC

** Tag-to-ID mappings for tag-based auto-refile script
#+BEGIN_SRC emacs-lisp
;; automatically refiling (moving) Org headings based on their tags added on 2025-09-20
(defcustom my-org-refile-to-ids nil
  "Tag to target ID mappings."
  :group 'sacha
  :type '(repeat (cons string string)))
#+END_SRC

** Customized Agenda view files on startup excluding roam, build, backup and other directory
#+BEGIN_SRC emacs-lisp
;; Use default-directory + "notes/" for the notes directory
(defun my/update-agenda-files ()
  "Set `org-agenda-files` to top-level .org files in `notes/` under `default-directory`."
  (interactive)
  (let* ((notes-dir (file-name-as-directory (expand-file-name "notes/" default-directory)))
         (names (when (file-directory-p notes-dir) (directory-files notes-dir nil "^[^.].*"))))
    (if (not names)
        (progn
          (setq org-agenda-files nil)
          (message "my/update-agenda-files: notes dir missing or empty: %s" notes-dir))
      (setq org-agenda-files
            (mapcar (lambda (n) (expand-file-name n notes-dir))
                    (seq-filter (lambda (n)
                                  (and (string-match-p "\\.org\\'" n)
                                       (file-regular-p (expand-file-name n notes-dir))))
                                names)))
      (message "org-agenda-files set (%d files) from %s" (length org-agenda-files) notes-dir))))

;; Initialize once
(my/update-agenda-files)

;; Rescan only when saving a top-level Org file under the same notes/ derived from default-directory
(add-hook 'after-save-hook
          (lambda ()
            (when (and (derived-mode-p 'org-mode)
                       buffer-file-name)
              (let ((notes-dir (file-name-as-directory (expand-file-name "notes/" default-directory)))
                    (bufdir (file-name-as-directory (expand-file-name (file-name-directory buffer-file-name)))))
                (when (string= notes-dir bufdir)
                  (my/update-agenda-files))))))
#+END_SRC


** Debug: Confirm startup.
#+BEGIN_SRC emacs-lisp
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTUP OPTIMIZATIONS COMPLETE ==="))
#+END_SRC

* ACTIVE Package Management
Configure package managers and lightweight, universal packages with lazy loading.
Heavy or laptop-specific packages are in org/workflows.org; org-roam and bibliographic tools in org/roam.org; filetags in org/filetags.org.

| Package      | Purpose                          | Device       | Keybindings              | Loading Trigger          |
|--------------|----------------------------------|--------------|--------------------------|--------------------------|
| org          | Core Org-mode                    | All          | Org-mode keys            | Built-in                 |
| org-roam     | Zettelkasten note-taking         | All          | C-c r n, r f, r i, r g   | Startup                  |
| org-roam-bibtex | Zotero/BibTeX citation capture | All          |                          | org-roam-mode hook       |
| citar        | Bibliography interface           | All          | C-c r c                  | On demand                |
| org-roam-ui  | Graphical note graph (web UI)    | Laptop only  | C-c r g                  | M-x or keybinding        |
| f            | File/directory manipulation      | All          | None                     | On demand                |
| ht           | Hash table utilities             | All          | None                     | On demand                |
| ibuffer      | Buffer management                | All          | C-x C-b                  | C-x C-b                  |
| org-crypt    | Password encryption              | All          | None                     | org-mode hook            |
| cdlatex      | Math/equation input              | All          | TAB (contextual)         | TAB                      |
| yasnippet    | Snippet framework                | All          | TAB (inline yas-expand), C-c s (yas-insert-snippet) | TAB, C-c s            |
| yankpad      | Org-style snippet library        | All          | C-c y, C-c Y             | C-c y                    |
| flyspell     | Spell checking                   | All          | M-$                      | M-$                      |

** Org Base Configuration
#+BEGIN_SRC emacs-lisp
(use-package org
  :straight (:type built-in)
  :ensure nil
  :config
  ;; Babel settings (consolidated here for minimal files)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
  ;; Add future Babel expansions above as needed

  ;; Core requires
  (require 'oc)
  (require 'oc-biblatex))
  ;; Enable refiling to any heading in agenda files (incl. roam/notes/mobile)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
  (setq org-refile-use-outline-path 'file) ;; Show file paths in prompt
  (setq org-outline-path-complete-in-steps nil) ;; Complete in one step (Vertico fuzzy)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)  ; Cache targets for speed
#+END_SRC

** Ensure use-package is available.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

** File manipulation library (loaded on demand).
#+BEGIN_SRC emacs-lisp
(use-package f
  :straight t
  :defer t)
#+END_SRC

** Hash table utilities (loaded on demand).
#+BEGIN_SRC emacs-lisp
(use-package ht
  :straight t
  :defer t)
#+END_SRC

** Ibuffer for buffer management (loaded on C-x C-b).
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight t
  :defer t
  :bind ("C-x C-b" . ibuffer))
#+END_SRC

** Encrypt org files
#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :ensure nil                        ;; Do not install from ELPA
  :straight nil                      ;; Do not use straight.el
  :defer t                           ;; Load when needed (on demand)
  :config
  (setq org-crypt-use-before-save nil) ;; Optional: prevent auto-encryption on save
  (require 'org-crypt))
#+END_SRC

** Flyspell for spell checking (loaded on M-$).
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight t
  :defer t
  :bind ("M-$" . flyspell-correct-word-before-point)
  :config
  (when (executable-find "aspell")
    (setq ispell-program-name "aspell")))
#+END_SRC

** CD Latex package for latex equations
#+BEGIN_SRC emacs-lisp
 (use-package cdlatex 
  :straight t 
  :defer t
  :hook (org-mode . org-cdlatex-mode))
#+END_SRC
   
** AUCTeX is an extensible package for writing and formatting TeX files in Emacs and XEmacs
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :straight t
  :defer t  ;; Load on demand
  :hook (LaTeX-mode . (lambda () (turn-on-reftex) (flyspell-mode)))  ;; Optional: RefTeX for refs, spell-check
  :config
  (setq TeX-auto-save t
        TeX-parse-self t))
#+END_SRC

** Yasnippet package for adding snippets in org files
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :straight t
  :bind ("C-c s" . yas-insert-snippet)  ;; Pop up selectable snippets (e.g., tbl, fig)
  :config
  (yas-global-mode 1)
  (setq yas-indent-line 'fixed)  ;; Preserves indentation
  (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory))
  (yas-reload-all)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  :diminish yas-minor-mode)
#+END_SRC


** Yankpad: Org-mode snippet library on top of Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yankpad
  :straight t
  :bind
  (("C-c Y" . yankpad-expand)  ;; Expand snippet at point with yasnippet evaluation
   ("C-c y" . yankpad-insert)) ;; Insert snippet as plain text (no evaluation)
  :config
  ;; Set yankpad file in a portable location
  (setq yankpad-file (expand-file-name "org/yankpad.org"
                                       user-emacs-directory))
  ;; Ensure directory exists
  (let ((yankpad-dir (file-name-directory yankpad-file)))
    (unless (file-directory-p yankpad-dir)
      (make-directory yankpad-dir t)))

  ;; Load snippets immediately
  (yankpad-reload)

  ;; Optional: auto-reload in Org buffers
  (add-hook 'org-mode-hook #'yankpad-reload))

#+END_SRC

** Install the MELPA sqlite3 package
#+BEGIN_SRC emacs-lisp
(use-package emacsql-sqlite3
  :straight t
  :defer t)
#+END_SRC

** Vertico: vertical completion UI Work well with org-roam (and Emacs in general) much faster, more flexible, and user-friendly. 
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :straight t
  :defer t
  :init
  (vertico-mode))
#+END_SRC

** Orderless: smart fuzzy matching for completion
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :straight t
  :defer t
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Future enhancement Consult package: enhanced commands. :future:
Powerful, fast,and flexible search/navigation UI (search, buffer switch, etc.) for working with Org-roam and Emacs in general.It can be enabled later for future optimization.

#+BEGIN_SRC emacs-lisp 
(use-package consult
  :straight t
  :bind
  (("C-s" . consult-line)
  ("C-c h" . consult-org-heading)
  ("C-c k" . consult-ripgrep)
  ("C-c b" . consult-buffer)
  ("C-c p" . consult-find)))
#+END_SRC

** Zotero/Bibliography Integration
#+BEGIN_SRC emacs-lisp
(use-package citar
  :straight t
  :custom
  ;; BibTeX file path relative to your Org note directory
  (citar-bibliography (condition-case nil
                          (list (expand-file-name "references.bib" (file-name-directory setupfile)))
                        (error nil)))  ;; Error handling if path missing
  ;; Path where Zotero stores PDFs
  (citar-library-paths (list "~/wspace/src/zotero-kbase/storage"))
  ;; Integrate with org-roam-bibtex
  (citar-open-note-function #'orb-citar-edit-note)
  ;; Enables inserting citations, following/opening citations and Enables styling and mouse-hover/click interaction
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  :config
  ;; Allow both roam and general notes
  (setq citar-notes-paths
  (list (expand-file-name org-roam-directory)))
  (citar-capf-setup)  ;; Completion-at-point for citations
  :bind
  ("C-c r c" . citar-open)) ;; Open citation note or resource
#+END_SRC


** RefTeX for Advanced Citation/Ref Handling.
If using AUCTeX for LaTeX exports, add reftex package.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :straight t
  :defer t
  :diminish reftex-mode)
;; Integrate RefTeX with AUCTeX
(use-package auctex
  :straight t
  :defer t
  :hook (LaTeX-mode . (lambda () (turn-on-reftex) (flyspell-mode)))
  :config
  (setq TeX-auto-save t
        TeX-parse-self t
        reftex-plug-into-AUCTeX t))  
#+END_SRC


** pdf tools: Enable in-buffer PDF viewing in Emacs (rather than opening PDFs in external viewers)
;; Use features like highlighting, annotations, or text selection. Work along with org-noter for taking notes synchronized with PDF pages
;; Updated on 2025-08-15 for support termux build in android devices.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :straight t
  :defer t
  :config
  ;; Use existing epdfinfo binary in Termux
  (setq pdf-info-epdfinfo-program
        (expand-file-name "~/.emacs.d/straight/build/pdf-tools/build/epdfinfo"))
  (pdf-tools-install-noverify)

  ;; Set display size to fit page
  (setq-default pdf-view-display-size 'fit-page)

  ;; Activate annotations automatically
  (setq pdf-annot-activate-created-annotations t)

  ;; Set magic mode for PDFs explicitly
  (add-to-list 'magic-mode-alist '("%PDF" . pdf-view-mode))

  ;; Suppress pdf-view-mode errors for invalid arguments
  (advice-add 'pdf-view-mode :around
              (lambda (orig-fun &rest args)
                (ignore-errors (apply orig-fun nil))))

  ;; Clear pdf-tools metadata to avoid stale page references
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (when (buffer-file-name)
                (pdf-cache-clear-data (buffer-file-name))))))

#+END_SRC

** pdf annotation org noter optional dependancies
#+BEGIN_SRC emacs-lisp
;; Optional for org-noter EPUB/DJVU (suppress warnings if not used)
(use-package nov
  :straight t
  :defer t)
(use-package djvu
  :straight t
  :defer t)
#+END_SRC


** pdf annotation using org noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :straight t
  :after (:any org pdf-view)
  :init
  ;; Set notes search path using default-directory
  (setq org-noter-notes-search-path
        (list (expand-file-name "roam" default-directory)))
  :config
  (setq org-noter-separate-notes-from-heading t
        org-noter-hide-other nil
        org-noter-always-create-frame nil
        org-noter-kill-frame-at-session-end nil))

#+END_SRC



* ACTIVE UI Tweaks
#+BEGIN_SRC emacs-lisp
(when (eq my-device 'termux)
  (set-fringe-mode 0)
  (setq mouse-wheel-progressive-speed nil))
#+END_SRC

* ACTIVE General Settings

** Profiling
#+BEGIN_SRC emacs-lisp
(defvar my-config-el-start-time (current-time) "Time when config.el was started")
(setq my-config-el-start-time-iso (format-time-string "%Y-%m-%dT%T%:z"))
#+END_SRC

** UI Theme, word wrap and other settings.
#+BEGIN_SRC emacs-lisp
(load-theme 'tsdh-dark t)  ;;Dark theme for Emacs
(global-visual-line-mode 1) ;;Wrap text in GUI Windows
(set-fringe-mode 10) ;;Sets the width of the left and right fringes (the empty margin space at the edge of windows in Emacs) to 10 pixels.
(setq-default cursor-type 'bar) ;;Changes the default cursor shape to a vertical bar (instead of the default box).
#+END_SRC

** Device-specific backup directory under default-directory
#+BEGIN_SRC emacs-lisp
(defvar my-backup-dir (expand-file-name "notes/.backups/" default-directory)
  "Directory to store Emacs backup (~) files.")
#+END_SRC

** Create backup directory if it doesn't exist
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p my-backup-dir)
  (make-directory my-backup-dir t))
(setq backup-directory-alist `((".*" . ,my-backup-dir))
      version-control nil
      delete-old-versions t
      make-backup-files t
      backup-by-copying t)

(defvar my-autosave-dir (expand-file-name "notes/.autosaves/" default-directory)
  "Directory to store Emacs auto-save files.")
#+END_SRC

** Create autosave directory if missing
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p my-autosave-dir)
  (make-directory my-autosave-dir t))
#+END_SRC

** Redirect auto-save files to device-specific location
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,my-autosave-dir t))
      auto-save-default t)
#+END_SRC

** Other general settings
#+BEGIN_SRC emacs-lisp
;; Calendar: Monday as start of week
(setq-default calendar-week-start-day 1)

;; Sentences: No double space after periods
(setq-default sentence-end-double-space nil)

;; Truncate lines
(setq-default truncate-lines t)

;; Read-only files in view mode
(setq view-read-only t)

;; Timestamp functions
(defun my-insert-timestamp ()
  "Insert a timestamp in format YYYY-MM-DD HH:MM:SS"
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
(defun my-insert-datestamp ()
  "Insert a datestamp in format YYYY-MM-DD"
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
(defun my-insert-org-timestamp ()
  "Insert a timestamp in Org-mode format [YYYY-MM-DD Day HH:MM]"
  (interactive)
  (insert (format-time-string "[%Y-%m-%d %a %H:%M]")))

;; Added 2025-07-15: Allow alphabetical list continuation (1.a, 1.b, 1.c., ...)
(setq org-list-allow-alphabetical t)

;; Configure navigation between windows and automatic vertical preview for PDF.
;; Enable smart window navigation
(windmove-default-keybindings) ;; Shift + Arrow
(winner-mode 1)                ;; C-c <left/right> undo/redo window layout
#+END_SRC

** Force PDFs to open on the right-side window
#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\.pdf\\'"
               (display-buffer-in-side-window)
               (side . right)
               (window-width . 0.45)
               (slot . 1)))
#+END_SRC

** ACTIVE Org Attachment File directory
#+BEGIN_SRC emacs-lisp
;; Attachments relative to org file, in `.attach` folder
(setq org-attach-directory ".attach")
#+END_SRC

* ACTIVE Keybindings

** Tangle shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") (lambda ()
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (message "✅ config.org tangled")))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun my-tangle-all ()
  "Tangle all modular Org files."
  (interactive)
  (my/tangle-if-needed "org/filetags.org" "org/filetags.el")
  (my/tangle-if-needed "org/roam.org" "org/roam.el")
  ;; Add more modular files here (e.g., workflows.org when uncommented)
  (message "[%s] All modular files tangled" (format-time-string "%T")))
(global-set-key (kbd "C-c T") 'my-tangle-all)
#+END_SRC

** Timestamp keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i t") 'my-insert-timestamp)    ;; YYYY-MM-DD HH:MM:SS
(global-set-key (kbd "C-c i d") 'my-insert-datestamp)    ;; YYYY-MM-DD
(global-set-key (kbd "C-c i o") 'my-insert-org-timestamp) ;; [YYYY-MM-DD Day HH:MM]
#+END_SRC


** Citar Citation insertion keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i c") 'citar-insert-citation)  ;; Insert citation with Citar
#+END_SRC

** Org-mode specific keybinding for toggling items :Added 2025-07-15
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c i i") 'org-toggle-item)
#+END_SRC

** Disble Ctrl+Z key accidental suspend-frame(minimize the window) keybinding to Undo command
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") 'undo)

;; Org capture template
(global-set-key (kbd "C-c c") 'org-capture)

;; mu4e Email integration quick access
(global-set-key (kbd "C-c m") 'mu4e)


#+END_SRC

** Switching windows 
#+BEGIN_SRC emacs-lisp
;; Ace Window for fast jumping (M-o)
(use-package ace-window
  :bind (("M-o" . ace-window)))
#+END_SRC

** ORG Agenda keybinding
#+BEGIN_SRC emacs-lisp
;;[2025-08-10] Added to ensure org-agenda is loaded and keybinding works
(require 'org-agenda)
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

* ACTIVE Modular Configs
#+BEGIN_SRC emacs-lisp



(my/tangle-if-needed "org/orgxtn.org" "org/orgxtn.el")
(load (expand-file-name "org/orgxtn.el" user-emacs-directory) nil 'nomessage)

(when (eq my-device 'laptop)
  (my/tangle-if-needed "org/mail.org" "org/mail.el")
  (load (expand-file-name "org/mail.el" user-emacs-directory) nil 'nomessage))

(my/tangle-if-needed "org/filetags.org" "org/filetags.el")
(load (expand-file-name "org/filetags.el" user-emacs-directory) nil 'nomessage)

(my/tangle-if-needed "org/roam.org" "org/roam.el")
(load (expand-file-name "org/roam.el" user-emacs-directory) nil 'nomessage)

(my/tangle-if-needed "org/workflow.org" "org/workflow.el")
(load (expand-file-name "org/workflow.el" user-emacs-directory) nil 'nomessage)



#+END_SRC

* ACTIVE Startup Confirmation
#+BEGIN_SRC emacs-lisp
(message "✅ config.el loaded successfully on device: %s" my-device)
#+END_SRC

* CANCELLED Deprecated Settings
#+BEGIN_SRC emacs-lisp
;; Old timestamp code for Emacs < 27.1
;; (setq my-config-el-start-time-iso
;;       (concat (format-time-string "%Y-%m-%dT%T")
;;               ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
;;                (format-time-string "%z"))))
#+END_SRC
