#+TITLE: Emacs Literate Config
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+DATE: 2025-07-12

* Purpose
This Org-mode configuration is the single source for my Emacs 30 setup, designed to be:
- **Future-proof**: Structured with comments, tables, CANCELLED blocks.
- **Reliable**: Reproducible packages via straight.el, lazy loading.
- **Minimal**: Single config.org, minimal hooks/keybindings, early-init.el for GUI, unified tag management.
- **Portable**: Device-specific settings (laptop, Termux, tablet) via device.el.
- **Synced**: Via GitHub[](https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Modular**: Uses org/ for snippets (yankpad.org), workflows (workflows.org), and note-taking (**roam.org**).  **<-- Updated reference for consistency with file rename**
Tangle with `C-c t` or `M-x my-tangle-config-org`.

* My Digital Workflow
| *Workflow*                          | *Solution*                                         | *Notes*                                                        | *Device* | *Keybindings*         |
|-------------------------------------+----------------------------------------------------+----------------------------------------------------------------|----------|-----------------------|
| Installing packages                 | use-package with straight.el                       | Lazy loading in config.org; workflows.org optional (commented) | All      | None                  |
| Filter Org files                    | sparse trees                                       | Built-in Org feature for filtering headings                    | All      | C-c /                 |
| Focus on Org sub-hierarchy          | org-tree-to-indirect-buffer                        | Built-in Org for narrowing to subtree                          | All      | C-c C-x b             |
| Enhanced search/selection           | vertico, orderless                                 | Vertical completion and fuzzy matching; Ivy optional in workflows.org (commented) | All      | None (uses Vertico for completion) |
| Switching buffers                   | ibuffer                                            | Improved buffer list management                                | All      | C-x C-b               |
| Inserting date/time-stamps          | my-insert-timestamp(), my-insert-datestamp()       | Custom functions for timestamps                                | All      | C-c i t, C-c i d      |
| Org to PDF export                   | Org mode export via LaTeX (AUCTeX)                 | Uses auctex, reftex for refs; pdf-tools for viewing            | All/Laptop | C-c C-e l p           |
| Passwords                           | org-crypt                                          | Encrypt Org sections                                           | All      | None                  |
| Snippet management                  | yankpad with yasnippet                             | Org-style snippets in yankpad.org, tab-completion             | All      | C-c y (insert), C-c Y (expand), C-c TAB |
| Spell checking                      | flyspell with aspell                               | Requires aspell; M-$ for correction                           | All      | M-$                   |
| PDF reading/annotating              | pdf-tools, org-noter                               | pdf-tools for viewing/highlighting; org-noter for synced annotations in notes | Laptop/All | None (M-x org-noter for annotations) |
| Record screencasts                  | gif-screencast                                     | Optional in workflows.org (commented out)                      | Laptop   | C-c g                 |
| Zettelkasten note-taking            | org-roam                                           | In org/roam.org; graph UI on laptop; dailies capture; backlinking with IDs | All      | C-c r n (capture), C-c r f (find), C-c r g (UI), C-c r d (dailies) |
| Bibliography/Citations              | citar, org-roam-bibtex                             | Zotero integration; insert citations; bib notes in roam        | All      | C-c r c (open note/resource) |
| Tag Org sections                    | .filetags                                          | In org/filetags.org; tag completion with Vertico               | All      | C-c f t               |     |
* ACTIVE Startup Optimizations
;; modular org files tangle process.Tangling only happens when the .org file is newer than the .el file. Each .el file is loaded once after tangling.

#+BEGIN_SRC emacs-lisp
(defun my/tangle-if-needed (org-file el-file)
  "Tangle ORG-FILE to EL-FILE if needed, and load EL-FILE.
Deletes EL-FILE before tangling to ensure sync.
Skips load if no blocks tangled."
  (let* ((org-path (expand-file-name org-file user-emacs-directory))
         (el-path (expand-file-name el-file user-emacs-directory)))
    (when (or (not (file-exists-p el-path))
              (file-newer-than-file-p org-path el-path))
      (message "🔄 Tangling %s → %s" org-path el-path)
      (require 'org)
      (when (file-exists-p el-path)
        (delete-file el-path))
      (org-babel-tangle-file org-path el-path)) 
    (if (file-exists-p el-path)
        (load el-path)
      (message "⚠️ No tangled output: %s not found (possibly all blocks :tangle no)" el-path))))
#+END_SRC
** Debug startup (toggle with MY_DEBUG_DEVICE environment variable).
#+BEGIN_SRC emacs-lisp
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTING CONFIG ==="))
#+END_SRC
** Reset garbage collection threshold to 2MB after startup.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 2 1000 1000))))
#+END_SRC

** Disable startup screen.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Load device detection.
#+BEGIN_SRC emacs-lisp
(condition-case err
    (load (expand-file-name "device.el" user-emacs-directory))
  (error (message "❌ Failed to load device.el: %s" (error-message-string err))))
#+END_SRC

** Set default directory per device.
#+BEGIN_SRC emacs-lisp
(setq default-directory
      (cond ((eq my-device 'laptop) "~/wspace/org/notes/")
            ((eq my-device 'termux) "~/storage/shared/notes/")
            ((eq my-device 'tablet) "~/path/to/tablet/notes/")
            (t "~")))
(message "📁 Default directory set to: %s" default-directory)
#+END_SRC
** Debug: Confirm startup.

#+BEGIN_SRC emacs-lisp
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== STARTUP OPTIMIZATIONS COMPLETE ==="))
#+END_SRC

* ACTIVE Package Management
Configure package managers and lightweight, universal packages with lazy loading.
Heavy or laptop-specific packages are in org/workflows.org; org-roam and bibliographic tools in org/roam.org; filetags in org/filetags.org.

| Package         | Purpose                              | Device     | Keybindings            | Loading Trigger    |
|------------------+----------------------------------------+-------------+--------------------------+---------------------|
| org              | Core Org-mode                         | All         | Org-mode keys           | Built-in            |
| org-roam         | Zettelkasten note-taking              | All         | C-c r n, r f, r i, r g   | Startup             |
| org-roam-bibtex  | Zotero/BibTeX citation capture        | All         |                         | org-roam-mode hook  |
| citar            | Bibliography interface                | All         | C-c r c                  | On demand           |
| org-roam-ui      | Graphical note graph (web UI)         | Laptop only | C-c r g                  | M-x or keybinding   |
| f                | File/directory manipulation           | All         | None                     | On demand           |
| ht               | Hash table utilities                  | All         | None                     | On demand           |
| ibuffer          | Buffer management                     | All         | C-x C-b                  | C-x C-b             |
| org-crypt        | Password encryption                   | All         | None                     | org-mode hook       |
| cdlatex          | Math/equation input                   | All         | TAB (contextual)        | TAB                 |
| yasnippet        | Snippet framework                     | All         | TAB (inline yas-expand), C-c s (yas-insert-snippet) | TAB, C-c s          |
| yankpad          | Org-style snippet library             | All         | C-c y, C-c Y             | C-c y               |
| flyspell         | Spell checking                        | All         | M-$                      | M-$                 |

#+BEGIN_SRC emacs-lisp 

(use-package org
  ;; Since Org-mode is already built into Emacs
  :straight (:type built-in) 
  :ensure nil
  :config
  (require 'oc)  ;; Load org-cite
  (require 'oc-biblatex)  ;; Load biblatex processor
  (setq org-startup-indented t
        org-hide-emphasis-markers t))
#+END_SRC

** Ensure use-package is available.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

** File manipulation library (loaded on demand).
#+BEGIN_SRC emacs-lisp
(use-package f
  :straight t
  :defer t)
#+END_SRC

** Hash table utilities (loaded on demand).
#+BEGIN_SRC emacs-lisp
(use-package ht
  :straight t
  :defer t)
#+END_SRC

** Ibuffer for buffer management (loaded on C-x C-b).
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight t
  :defer t
  :bind ("C-x C-b" . ibuffer))
#+END_SRC

** Encrypt org files
#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :ensure nil                        ;; Do not install from ELPA
  :straight nil                      ;; Do not use straight.el
  :defer t                           ;; Load when needed (on demand)
  :config
  (setq org-crypt-use-before-save nil) ;; Optional: prevent auto-encryption on save
  (require 'org-crypt))
#+END_SRC

** Flyspell for spell checking (loaded on M-$).
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight t
  :defer t
  :bind ("M-$" . flyspell-correct-word-before-point)
  :config
  (when (executable-find "aspell")
    (setq ispell-program-name "aspell")))
#+END_SRC

** CD Latex package for latex equations
#+BEGIN_SRC emacs-lisp
 (use-package cdlatex 
  :straight t 
  :defer t
  :hook (org-mode . org-cdlatex-mode))
#+END_SRC
   
** AUCTeX is an extensible package for writing and formatting TeX files in Emacs and XEmacs
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :straight t
  :defer t  ;; Load on demand
  :hook (LaTeX-mode . (lambda () (turn-on-reftex) (flyspell-mode)))  ;; Optional: RefTeX for refs, spell-check
  :config
  (setq TeX-auto-save t
        TeX-parse-self t))
#+END_SRC

** Smart TAB: Yasnippet (inline) → CDLaTeX (math) → Org-cycle
#+BEGIN_SRC emacs-lisp
(defun my/org-smart-tab ()
  "Smart TAB: Inline Yasnippet expand if match, then CDLaTeX math if in LaTeX, then Org-cycle."
  (interactive)
  (cond
   ((org-at-heading-p) (org-cycle))  ;; Cycle headings
   ((org-in-src-block-p) (org-cycle))  ;; Cycle in source blocks
   ((and (bound-and-true-p yas-minor-mode)
         (yas-maybe-expand)) t)  ;; Inline expand snippet if trigger matches
   ((and (bound-and-true-p cdlatex-mode)
         (org-inside-LaTeX-fragment-p))  ;; Expand math if in LaTeX
    (cdlatex-tab))
   (t (org-cycle))))  ;; Fallback to Org-cycle

;; Bind TAB to smart function in Org-mode
(define-key org-mode-map (kbd "TAB") #'my/org-smart-tab)
#+END_SRC

** Yasnippet package for adding snippets in org files
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :straight t
  :bind ("C-c s" . yas-insert-snippet)  ;; Pop up selectable snippets (e.g., tbl, fig)
  :config
  (yas-global-mode 1)
  (setq yas-indent-line 'fixed)  ;; Preserves indentation
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-reload-all)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  :diminish yas-minor-mode)
#+END_SRC


** 📘 Yankpad: Org-mode snippet library on top of Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yankpad
  :straight t
  :bind (("C-c Y" . yankpad-expand)  ;; Expand snippet at point with yasnippet evaluation
         ("C-c y" . yankpad-insert)) ;; Insert snippet from completion list (raw, suitable for plain Org content)
  :init
  ;; Reload snippets in Org buffers after yankpad loads (simple lazy loading)
  (with-eval-after-load 'yankpad
    (add-hook 'org-mode-hook #'yankpad-reload))
  :config
  ;; Define yankpad.org location based on device (portable across laptop, Termux, tablet)
  (message "Yankpad file: %s" yankpad-file)
  (setq yankpad-file
        (cond
         ((eq my-device 'laptop)
          (expand-file-name "org/yankpad.org" user-emacs-directory))
         ((eq my-device 'termux)
          (expand-file-name "storage/shared/notes/yankpad.org"))
         ((eq my-device 'tablet)
          (expand-file-name "path/to/tablet/notes/yankpad.org"))
         (t (expand-file-name "org/yankpad.org" user-emacs-directory))))
  (yankpad-reload))  ;; Reload snippets immediately after config
#+END_SRC

** Install the MELPA sqlite3 package
#+BEGIN_SRC emacs-lisp
(use-package emacsql-sqlite3
  :straight t
  :defer t)
#+END_SRC

** Vertico: vertical completion UI Work well with org-roam (and Emacs in general) much faster, more flexible, and user-friendly. 
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :straight t
  :defer t
  :init
  (vertico-mode))
#+END_SRC

** Orderless: smart fuzzy matching for completion
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :straight t
  :defer t
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Future enhancement Consult package: enhanced commands. :future:
Powerful, fast,and flexible search/navigation UI (search, buffer switch, etc.) for working with Org-roam and Emacs in general.It can be enabled later for future optimization.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package consult
  :straight t
  :bind
  (("C-s" . consult-line)
  ("C-c h" . consult-org-heading)
  ("C-c k" . consult-ripgrep)
  ("C-c b" . consult-buffer)))
#+END_SRC

** Zotero/Bibliography Integration
#+BEGIN_SRC emacs-lisp
(use-package citar
  :straight t
  :custom
  ;; BibTeX file path relative to your Org note directory
  (citar-bibliography (list (expand-file-name "include/references.bib" default-directory)))
  ;; Path where Zotero stores PDFs
  (citar-library-paths (list "~/wspace/src/zotero-kbase/storage"))
  ;; Integrate with org-roam-bibtex
  (citar-open-note-function #'orb-citar-edit-note)
  ;; Enables inserting citations, following/opening citations and Enables styling and mouse-hover/click interaction
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  :config
  ;; Allow both roam and general notes
  (setq citar-notes-paths
  (list (expand-file-name org-roam-directory)))
  :bind
  ("C-c r c" . citar-open)) ;; Open citation note or resource
#+END_SRC


** RefTeX for Advanced Citation/Ref Handling.
If using AUCTeX for LaTeX exports, add reftex package.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :straight t
  :defer t
  :diminish reftex-mode)
#+END_SRC

** pdf tools: Enable in-buffer PDF viewing in Emacs (rather than opening PDFs in external viewers)
;; Use features like highlighting, annotations, or text selection. Work along with org-noter for taking notes synchronized with PDF pages

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :straight t
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t))
#+END_SRC

** pdf annotation using org noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :straight t
  :after (:any org pdf-view)
  :init
  ;; Set notes search path using default-directory
  (setq org-noter-notes-search-path
        (list (expand-file-name "roam" default-directory)))
  :config
  (setq org-noter-separate-notes-from-heading t
        org-noter-hide-other nil
        org-noter-always-create-frame nil
        org-noter-kill-frame-at-session-end nil))

#+END_SRC

* ACTIVE UI Tweaks
#+BEGIN_SRC emacs-lisp
(when (eq my-device 'termux)
  (set-fringe-mode 0)
  (setq mouse-wheel-progressive-speed nil))
#+END_SRC

* ACTIVE General Settings

** Profiling
#+BEGIN_SRC emacs-lisp
(defvar my-config-el-start-time (current-time) "Time when config.el was started")
(setq my-config-el-start-time-iso (format-time-string "%Y-%m-%dT%T%:z"))
#+END_SRC

** UI Theme, word wrap and other settings.
#+BEGIN_SRC emacs-lisp
(load-theme 'tsdh-dark t)  ;;Dark theme for Emacs
(global-visual-line-mode 1) ;;Wrap text in GUI Windows
(set-fringe-mode 10) ;;Sets the width of the left and right fringes (the empty margin space at the edge of windows in Emacs) to 10 pixels.
(setq-default cursor-type 'bar) ;;Changes the default cursor shape to a vertical bar (instead of the default box).
#+END_SRC

** Device-specific backup directory under default-directory
#+BEGIN_SRC emacs-lisp
(defvar my-backup-dir (expand-file-name ".backups/" default-directory)
  "Directory to store Emacs backup (~) files.")
#+END_SRC

** Create backup directory if it doesn't exist
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p my-backup-dir)
  (make-directory my-backup-dir t))
(setq backup-directory-alist `((".*" . ,my-backup-dir))
      version-control nil
      delete-old-versions t
      make-backup-files t
      backup-by-copying t)

(defvar my-autosave-dir (expand-file-name ".autosaves/" default-directory)
  "Directory to store Emacs auto-save files.")
#+END_SRC

** Create autosave directory if missing
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p my-autosave-dir)
  (make-directory my-autosave-dir t))
#+END_SRC

** Redirect auto-save files to device-specific location
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,my-autosave-dir t))
      auto-save-default t)
#+END_SRC

** Other general settings
#+BEGIN_SRC emacs-lisp
;; Calendar: Monday as start of week
(setq-default calendar-week-start-day 1)

;; Sentences: No double space after periods
(setq-default sentence-end-double-space nil)

;; Truncate lines
(setq-default truncate-lines t)

;; Read-only files in view mode
(setq view-read-only t)

;; Timestamp functions
(defun my-insert-timestamp ()
  "Insert a timestamp in format YYYY-MM-DD HH:MM:SS"
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
(defun my-insert-datestamp ()
  "Insert a datestamp in format YYYY-MM-DD"
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
(defun my-insert-org-timestamp ()
  "Insert a timestamp in Org-mode format [YYYY-MM-DD Day HH:MM]"
  (interactive)
  (insert (format-time-string "[%Y-%m-%d %a %H:%M]")))

;; Added 2025-07-15: Allow alphabetical list continuation (1.a, 1.b, 1.c., ...)
(setq org-list-allow-alphabetical t)
#+END_SRC

** Org Hooks for file handling
;; Added 2025-07-28: Hook for #+LAST_MODIFIED: update while editing the org file. 

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook
          (lambda ()
            (when (derived-mode-p 'org-mode)
              (save-excursion
                (goto-char (point-min))
                ;; Remove existing LAST_MODIFIED lines
                (while (re-search-forward "^#\\+LAST_MODIFIED:.*$" nil t)
                  (replace-match ""))
                ;; Insert LAST_MODIFIED with current timestamp
                (goto-char (point-min))
                (if (re-search-forward "^$" nil t)
                    (insert (format "#+LAST_MODIFIED: [%s]\n"
                                    (format-time-string "%Y-%m-%d %a %H:%M")))
                  (goto-char (point-max))
                  (insert (format "\n#+LAST_MODIFIED: [%s]\n"
                                  (format-time-string "%Y-%m-%d %a %H:%M"))))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(eval
`(setq org-capture-templates
      '(("n" "Generic Note" plain
         ;; Prompt for file name in notes dir (default-directory is device-aware)
         (file (lambda () (read-file-name "New Note File: " default-directory nil nil ".org")))
         ;; Load template as a resolved string
         (file, (expand-file-name "template/generic-note.org" user-emacs-directory))
         :empty-lines 1  ;; Spacing
         :prepend t  ;; Add at top if file exists
         :create t))))  ;; Create file if not exists
#+END_SRC

** Glossaries and citation export during latex pdf
#+BEGIN_SRC emacs-lisp
;; 1. Runs lualatex once to generate aux files.2.biber for bibliography. 
;; 3. Runs makeglossaries for glossaries and acronyms. 
;; 4. Runs lualatex again (twice) to resolve all references and render everything.
  (setq org-latex-pdf-process
      '("lualatex -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "makeglossaries %b"
        "lualatex -interaction nonstopmode -output-directory %o %f"
        "lualatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

* ACTIVE Keybindings

** Tangle shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") (lambda ()
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (message "✅ config.org tangled")))
#+END_SRC


** Timestamp keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i t") 'my-insert-timestamp)    ;; YYYY-MM-DD HH:MM:SS
(global-set-key (kbd "C-c i d") 'my-insert-datestamp)    ;; YYYY-MM-DD
(global-set-key (kbd "C-c i o") 'my-insert-org-timestamp) ;; [YYYY-MM-DD Day HH:MM]
#+END_SRC


** Citar Citation insertion keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i c") 'citar-insert-citation)  ;; Insert citation with Citar
#+END_SRC

** Org-mode specific keybinding for toggling items :Added 2025-07-15
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c i i") 'org-toggle-item)
#+END_SRC

** Disble Ctrl+Z key accidental suspend-frame(minimize the window) keybinding to Undo command
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") 'undo)

;; Org capture template
(global-set-key (kbd "C-c c") 'org-capture)

#+END_SRC

** Org Capture Templates
;; Added 2025-07-28: capture template, loading content from generic-note.org.

* ACTIVE Modular Configs
#+BEGIN_SRC emacs-lisp
(my/tangle-if-needed "org/filetags.org" "org/filetags.el")
(load (expand-file-name "org/filetags.el" user-emacs-directory) nil 'nomessage)

(my/tangle-if-needed "org/roam.org" "org/roam.el")
(load (expand-file-name "org/roam.el" user-emacs-directory) nil 'nomessage)

;;(my/tangle-if-needed "org/workflows.org" "org/workflows.el")
;;(load (expand-file-name "org/workflows.el" user-emacs-directory) nil 'nomessage)
#+END_SRC

* ACTIVE Startup Confirmation
#+BEGIN_SRC emacs-lisp
(message "✅ config.el loaded successfully on device: %s" my-device)
#+END_SRC

* CANCELLED Deprecated Settings
#+BEGIN_SRC emacs-lisp
;; Old timestamp code for Emacs < 27.1
;; (setq my-config-el-start-time-iso
;;       (concat (format-time-string "%Y-%m-%dT%T")
;;               ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
;;                (format-time-string "%z"))))
#+END_SRC
