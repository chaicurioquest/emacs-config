#+TITLE: Filetags Configuration
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle filetags.el :mkdirp yes :comments no :results silent
#+DATE: 2025-07-09

* Filetags Configuration for Emacs

This configuration sets up two layers of tag files:
1. `~/.emacs.d/.filetags` – General-purpose tags for PIM and file management (used globally).
2. `~/.emacs.d/.filetags-org` – Specific to Org-mode and Org-Roam files under `~/wspace/org/notes/`.


 Based on Karl Voit’s tag guidelines:
- Lowercase, plural, minimal, non-overlapping, general
- Avoids redundancy

- Features:
- **Future-proof**: Tidy structure and extensible
- **Reliable**: Uses `ht` and `f.el` for parsing
- **Minimal**: Lightweight, no UI assumptions
- **Portable**: Works across laptop, Termux, tablet
- **Synced**: Via GitHub (https://github.com/chaicurioquest/emacs-config) and Syncthing.

* ACTIVE Filetags Setup
Configure filetags for tag management with mutual exclusivity, used by org-roam (C-c r t) and standalone (C-c f t).
| Package      | Purpose                     | Device  | Keybindings | Loading Trigger |
|--------------|-----------------------------|---------|-------------|-----------------|
| filetags     | Tag management with .filetags | All     | C-c f t     | C-c f t         |

#+BEGIN_SRC emacs-lisp 
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== LOADING org/filetags.org ==="))
#+END_SRC

* Global Tag Files for Filetags Completion
#+BEGIN_SRC emacs-lisp 
(setq filetags-tag-file "~/.emacs.d/.filetags"
      filetags-extra-tag-files '("~/.emacs.d/.filetags-org"))
#+END_SRC

* ACTIVE Tag Management
This section manages global and Org-specific tags using `.filetags` and `.filetags-org`.

#+BEGIN_SRC emacs-lisp
;; Define global and extra .filetags files
(setq filetags-tag-file "~/.emacs.d/.filetags"
      filetags-extra-tag-files '("~/.emacs.d/.filetags-org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org--filetags-path ()
  "Return the path to the active global .filetags file."
  (let ((link (expand-file-name ".filetags" user-emacs-directory)))
    (cond
     ((file-symlink-p link) (file-truename link))
     ((file-exists-p link) link)
     ((eq my-device 'laptop) (expand-file-name "~/.filetags"))
     ((eq my-device 'termux) (expand-file-name "~/storage/shared/.filetags"))
     ((eq my-device 'tablet) (expand-file-name "~/path/to/tablet/.filetags"))
     (t (expand-file-name "~/.filetags")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-read-filetags ()
  "Read and return a list of tags from both global and extra .filetags files."
  (let ((files (cons (my-org--filetags-path) filetags-extra-tag-files))
        (tags '()))
    (dolist (file files)
      (when (file-exists-p file)
        (with-temp-buffer
          (insert-file-contents file)
          (goto-char (point-min))
          (while (not (eobp))
            (let* ((line (buffer-substring-no-properties
                          (line-beginning-position) (line-end-position)))
                   (clean (car (split-string line "#")))
                   (words (split-string (string-trim clean) "\\s-+" t)))
              (dolist (tag words)
                (push tag tags)))
            (forward-line 1)))))
    (delete-dups (nreverse tags))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-set-filetags ()
  "Interactively assign multiple tags from .filetags to the current Org heading."
  (interactive)
  (require 'org)
  (let* ((all-tags (my-org-read-filetags))
         (current-tags (org-get-tags nil t))
         (completion-function
          (cond
           ((and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
            (lambda (prompt choices)
              (ivy-read prompt choices
                        :require-match t
                        :initial-input ""
                        :preselect (car current-tags)
                        :multi-action t)))
           ((fboundp 'completing-read-multiple)
            (lambda (prompt choices)
              (completing-read-multiple prompt choices nil t)))
           (t (lambda (prompt choices)
                (list (completing-read prompt choices nil t))))))
         (selected-tags (funcall completion-function "Select tags: " all-tags)))
    (org-set-tags selected-tags)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c f t") 'my-org-set-filetags)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== org/filetags.org LOADED ==="))
#+END_SRC
