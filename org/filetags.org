#+TITLE: Filetags Configuration
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle filetags.el :mkdirp yes :comments no :results silent
#+DATE: 2025-07-09

* Purpose
Configure filetags for unified tag management across Org files, integrated with org-roam and .filetags (symlink to ~/wspace/org/notes/.filetags). Uses roam-tags.el for mutual exclusivity and follows Karl Voitâ€™s tag naming rules (e.g., plural forms like `tasks`). Designed to be:
- **Future-proof**: Structured with comments and tables.
- **Reliable**: Uses ht and f for tag parsing, reproducible via straight.el.
- **Minimal**: Lightweight setup with essential keybindings.
- **Portable**: Works on laptop, Termux, tablet.
- **Synced**: Via GitHub (https://github.com/chaicurioquest/emacs-config) and Syncthing.

* ACTIVE Filetags Setup
Configure filetags for tag management with mutual exclusivity, used by org-roam (C-c r t) and standalone (C-c f t).
| Package      | Purpose                     | Device  | Keybindings | Loading Trigger |
|--------------|-----------------------------|---------|-------------|-----------------|
| filetags     | Tag management with .filetags | All     | C-c f t     | C-c f t         |

#+BEGIN_SRC emacs-lisp 
(when (getenv "MY_DEBUG_DEVICE")
  (message "=== LOADING org/filetags.org ==="))

* ACTIVE Tag Management
#+BEGIN_SRC emacs-lisp
:tangle yes
(defun my-org--filetags-path ()
  "Return actual .filetags path depending on the device."
  (let ((link (expand-file-name "org/.filetags" user-emacs-directory)))
    (cond
     ((file-symlink-p link) (file-truename link))
     ((file-exists-p link) link)
     ((eq my-device 'laptop) (expand-file-name "~/.filetags"))
     ((eq my-device 'termux) (expand-file-name "~/storage/shared/.filetags"))
     ((eq my-device 'tablet) (expand-file-name "~/path/to/tablet/.filetags"))
     (t (expand-file-name "~/.filetags")))))
(defun my-org-read-filetags ()
  "Read tags from .filetags file as a flat list, skipping comments and empty lines."
  (let ((file (my-org--filetags-path))
        (tags '()))
    (when (file-exists-p file)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (while (not (eobp))
          (let* ((line (buffer-substring-no-properties (line-beginning-position)
                                                       (line-end-position)))
                 ;; Strip comments after `#`
                 (clean (car (split-string line "#")))
                 (words (split-string (string-trim clean) "\\s-+" t)))
            (dolist (tag words)
              (push tag tags)))
          (forward-line 1))))
    (delete-dups (nreverse tags))))

;;(defun my-org-dynamic-tags ()
;;  "Return pipe-separated tag string from .filetags for Yankpad/Yasnippet use."
;;  (let ((tags (my-org-read-filetags)))
;;    (if tags
;;        (string-join tags "|")
;;     "")))

(defun my-org-set-filetags ()
  "Set multiple filetags on current Org heading with completion."
  (interactive)
  (require 'org)
  (let* ((all-tags (my-org-read-filetags))
         (current-tags (org-get-tags nil t))
         (completion-function
          (cond
           ((and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
            (lambda (prompt choices)
              (ivy-read prompt choices
                        :require-match t
                        :initial-input ""
                        :preselect (car current-tags)
                        :multi-action t)))
           ((fboundp 'completing-read-multiple)
            (lambda (prompt choices)
              (completing-read-multiple prompt choices nil t)))
           (t (lambda (prompt choices)
                (list (completing-read prompt choices nil t))))))
         (selected-tags (funcall completion-function "Select tags: " all-tags)))
    (org-set-tags selected-tags)))

(global-set-key (kbd "C-c f t") 'my-org-set-filetags)
#+END_SRC

(when (getenv "MY_DEBUG_DEVICE")
  (message "=== org/filetags.org LOADED ==="))
#+END_SRC
