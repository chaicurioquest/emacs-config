#+TITLE: Org-Roam Zettelkasten Configuration
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle org-roam.el :mkdirp yes :comments no :results silent
#+DATE: 2025-07-12

* Purpose

Configure org-roam for Zettelkasten note-taking with unique IDs, backlinks, and dynamic tags from .filetags via my-org-dynamic-tags in config.org. Designed to be:
- **Future-proof**: Structured with comments and tables.
- **Reliable**: Reproducible via straight.el with error handling.
- **Minimal**: Lightweight setup with essential keybindings, no external dependencies beyond org-roam.
- **Portable**: Works on laptop (system-name: ram), Termux, tablet.
- **Synced**: Via GitHub (https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Integrated**: Uses my-org-dynamic-tags for tag completion, shared with yankpad snippets and Integrates with Zotero via `org-roam-bibtex`.

* ACTIVE Org-roam Setup
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight t
  :init
  (setq org-roam-directory default-directory)
  (let ((roam-subdir (expand-file-name "roam" org-roam-directory)))
    (unless (file-exists-p roam-subdir)
      (make-directory roam-subdir t)))
  (setq org-roam-dailies-directory "roam")
  :bind (("C-c r f" . org-roam-node-find)
         ("C-c r i" . org-roam-node-insert)
         ("C-c r n" . org-roam-capture)
         ("C-c r t" . my-org-roam-tag-add)
         ("C-c r r" . org-roam-tag-remove))
  :custom
  (org-roam-v2-ack t)
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1)
  (message "âœ… org-roam initialized."))

(eval
 `(setq org-roam-capture-templates
      `(("d" "default" plain
         (file ,(expand-file-name "template/roam-default.org" user-emacs-directory))
         :if-new (file+head "roam/%<%Y%m%d%H%M%S>-${slug}.org" "")
         :unnarrowed t)
        ("f" "fleeting" plain
         (file ,(expand-file-name "template/roam-fleeting.org" user-emacs-directory))
         :if-new (file+head "roam/%<%Y%m%d%H%M%S>-${slug}.org" "")
         :unnarrowed t)
        ("p" "permanent" plain
         (file ,(expand-file-name "template/roam-permanent.org" user-emacs-directory))
         :if-new (file+head "roam/%<%Y%m%d%H%M%S>-${slug}.org" "")
         :unnarrowed t)
        ("j" "journal" plain
         (file ,(expand-file-name "template/roam-journal.org" user-emacs-directory))
         :if-new (file+head "roam/%<%Y%m%d%H%M%S>-${slug}.org" "")
         :unnarrowed t))))
#+END_SRC


* Zotero/Bibliography Integration
#+BEGIN_SRC emacs-lisp
(use-package citar
  :straight t
  :custom
  (citar-bibliography
   (list (expand-file-name "references.bib" default-directory)))
  (citar-notes-paths `(,default-directory))
  (citar-library-paths `(,(expand-file-name "pdfs" default-directory)))
  (citar-open-note-function 'orb-citar-edit-note)
  :bind ("C-c r c" . citar-open))

(use-package org-roam-bibtex
  :straight t
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-roam-bibtex)
  (setq orb-preformat-keywords
        '("title" "url" "author-or-editor" "keywords"))
  (setq orb-process-file-keyword t
        orb-attached-file-extensions '("pdf")))
#+END_SRC

* Org-roam UI (Graph)
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :if (eq my-device 'laptop)
  :straight (:host github :repo "org-roam/org-roam-ui" :branch "main")
  :defer t
  :bind (("C-c r g" . org-roam-ui-open))
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+END_SRC

* Helper: Add Tag via Filetags Completion
#+BEGIN_SRC emacs-lisp
(defun my-org-roam-tag-add ()
  "Add a tag to the current org-roam node with completion."
  (interactive)
  (let* ((all-tags (my-org-read-filetags))
         (completion-function (if (and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
                                  'ivy-completing-read
                                'completing-read))
         (selected-tag (funcall completion-function "Select tag: " all-tags)))
    (when selected-tag
      (org-roam-tag-add (list selected-tag)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-roam-tag-remove ()
  "Remove a tag from the current org-roam node with completion."
  (interactive)
  (let* ((current-tags (org-roam-node-tags (org-roam-node-at-point)))
         (completion-function (if (and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
                                  'ivy-completing-read
                                'completing-read))
         (selected-tag (funcall completion-function "Remove tag: " current-tags)))
    (when selected-tag
      (org-roam-tag-remove (list selected-tag)))))
#+END_SRC

