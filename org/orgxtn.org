#+TITLE: Org Extensions Configuration
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+DATE: 2025-08-13
#+CREATED: %U
#+LAST_MODIFIED: [%<%Y-%m-%d %a %H:%M>]

This file contains consolidated configurations for general Org-mode extensions, including attachments, smart TAB, hooks, capture templates, and LaTeX/PDF export processes. VLSI-specific diagram settings (TikZ, CircuitTikZ, ditaa) are in ~org/customxtn.org~ (optional). Tangled to ~org/orgxtn.el~ and loaded via ~my/tangle-if-needed~ in ~config.org~.

Features:
- Centralized attachments directory
- Smart TAB integration (Yasnippet → CDLaTeX → Org-cycle)
- Vertical PDF preview
- Auto-update #+LAST_MODIFIED
- Simple Org-roam capture template loader
- Minimal Babel support (shell)
- LaTeX/PDF export via latexmk

* Quick Reference Table
| Feature                        | Keybinding / Usage                            | Notes |
|--------------------------------|-----------------------------------------------|-------|
| Attachment directory           | N/A                                           | All Org attachments in `.attach/` subfolder |
| Smart TAB function             | =TAB=                                         | Expands snippet → CDLaTeX → Org-cycle |
| Fit PDF to height              | =M-x my/pdf-view-fit-height=                  | Works in pdf-tools buffer |
| Auto-update `#+LAST_MODIFIED`  | On save                                       | Uses `before-save-hook` |
| Capture template loader        | `(my/load-template FILE)`                     | Replaces `${setupfile}` with actual path |
| Babel shell blocks             | `#+BEGIN_SRC sh` … `#+END_SRC`                | No confirm on eval |
| PDF export                     | `C-c C-e l o`                                 | Uses `latexmk` with `Fba` |

* ACTIVE General Org Settings
General Org-mode variables, functions, hooks, and templates that are not tightly coupled to export or Babel. These were moved from ~config.org~'s * ACTIVE General Settings and related sections, as they are Org-specific and have no external dependencies beyond Org itself (e.g., ~setupfile~ is assumed defined globally in ~config.org~).

#+BEGIN_SRC emacs-lisp
;; Attachments relative to org file, in `.attach` folder
(setq org-attach-directory ".attach")

;; Smart TAB: Yasnippet (inline) → CDLaTeX (math) → Org-cycle
(require 'yasnippet) ;; Ensure yasnippet is loaded for yas-maybe-expand
(defun my/org-smart-tab ()
  "Smart TAB: Inline Yasnippet expand if match, then CDLaTeX math if in LaTeX, then Org-cycle."
  (interactive)
  (cond
   ((org-at-heading-p) (org-cycle))
   ((org-in-src-block-p) (org-cycle))
   ((org-at-table-p 'any) (org-table-next-field)) ;; Handle tables properly
   ((and (bound-and-true-p yas-minor-mode)
         (yas-maybe-expand)) t)
   ((and (bound-and-true-p cdlatex-mode)
         (org-inside-LaTeX-fragment-p))
    (cdlatex-tab))
   (t (org-cycle)))) ;; Fallback to Org-cycle
;; Bind TAB to smart function in Org-mode
(define-key org-mode-map (kbd "TAB") #'my/org-smart-tab)

** ACTIVE Smart Org + PDF vertical preview
#+BEGIN_SRC emacs-lisp
(defun my/org-pdf-vertical-view ()
  "Open corresponding PDF in vertical split right of current org buffer."
  (interactive)
  (let ((pdf-file (concat (file-name-sans-extension (buffer-file-name)) ".pdf")))
    (when (file-exists-p pdf-file)
      (select-window (split-window-right))
      (find-file pdf-file))))
(global-set-key (kbd "C-c v") #'my/org-pdf-vertical-view)
#+END_SRC

** ACTIVE Org Hooks for file handling
;; Added 2025-07-28: Hook for #+LAST_MODIFIED: update while editing the org file.
#+BEGIN_SRC emacs-lisp
;; enable auto-revert when entering org buffers
(add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))

;; prefer file-notify (less polling) when available
(setq auto-revert-use-notify t)

;;my-org-update-tag-targets function scans all agenda files for headings with :TAG_TARGET: properties
;;constructing the mapping by prefixing tags with "+" (Org's match syntax for tags) and associating them with generated IDs
(defun my-org-update-tag-targets ()
  (interactive)
  (setq my-org-refile-to-ids
        (let (list)
          (org-map-entries
           (lambda ()
             (cons (concat "+" (org-entry-get (point) "TAG_TARGET"))
                   (org-id-get-create)))
           "TAG_TARGET={.}" 'agenda)))
  (customize-save-variable 'my-org-refile-to-ids my-org-refile-to-ids))

;; For adding new targets on the fly, my-org-add-tag-target  set the property and updating the list immediately
(defun my-org-add-tag-target (tag)
  (interactive "MTag: ")
  (org-entry-put (point) "TAG_TARGET" tag)
  (push (cons (concat "+" tag) (org-id-get-create)) my-org-refile-to-ids)
  (customize-save-variable 'my-org-refile-to-ids my-org-refile-to-ids))

;; Performs the actual refiling by identifying matching headings and moving them to the target
  (defun my-org-refile-matches-to-heading (match target-heading-id &optional scope copy)
  "Refile matching headings to target."
  (if-let (target-marker (org-id-find target-heading-id t))
      (let* ((target-rfloc (with-current-buffer (marker-buffer target-marker)
                             (goto-char target-marker)
                             (list (org-get-heading)
                                   (buffer-file-name (marker-buffer target-marker))
                                   nil
                                   target-marker)))
             (headings-to-copy (org-map-entries (lambda () (point-marker)) match scope)))
        (mapc
         (lambda (heading-marker)
           (with-current-buffer (marker-buffer heading-marker)
             (goto-char heading-marker)
             (org-refile nil nil target-rfloc (when copy "Copy"))))
         (nreverse headings-to-copy))
        (message "%s %d headings!" (if copy "Copied" "Refiled") (length headings-to-copy)))
     (warn "Could not find target %S" target-heading-id)))

;; my-org-refile-to-tag-targets iterates over all rules to execute batch refiles

(defun my-org-refile-to-tag-targets ()
  (interactive)
  (dolist (rule my-org-refile-to-ids)
    (my-org-refile-matches-to-heading (car rule) (cdr rule) 'file)))  ; Scope to inbox.org

(add-hook 'before-save-hook
  (lambda ()
    (when (derived-mode-p 'org-mode)
      (save-excursion
        ;; Remove all existing #+LAST_MODIFIED lines
        (goto-char (point-min))
        (while (re-search-forward "^#\\+LAST_MODIFIED:.*$" nil t)
          (beginning-of-line)
          (kill-line 1))
        ;; Find location of #+CREATED: line
        (goto-char (point-min))
        (if (re-search-forward "^#\\+CREATED:.*$" nil t)
            ;; If found, insert LAST_MODIFIED just after it
            (let ((created-end (line-end-position)))
              (goto-char created-end)
              (insert (format "\n#+LAST_MODIFIED: [%s]"
                              (format-time-string "%Y-%m-%d %a %H:%M"))))
          ;; Fallback: insert after metadata block at top
          (goto-char (point-min))
          (let ((metadata-end (point)))
            (while (looking-at "^\\(#\\|[ \t]*$\\)")
              (setq metadata-end (line-end-position))
              (forward-line 1))
            (goto-char metadata-end)
            ;; Insert newline if necessary
            (unless (looking-back "\n" nil)
              (insert "\n"))
            (insert (format "#+LAST_MODIFIED: [%s]\n"
                            (format-time-string "%Y-%m-%d %a %H:%M")))))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar my/generic-note-template
  (with-temp-buffer
    (insert-file-contents (expand-file-name "template/generic-note.org" user-emacs-directory))
    (goto-char (point-min))
    (while (search-forward "${setupfile}" nil t)
      (replace-match setupfile t t))
    (buffer-string)))
;; Added 2025-07-28: capture template, loading content from generic-note.org.


(setq org-capture-templates
  `(("n" "Generic Note" plain
     (file (lambda () (read-file-name "New Note File: " default-directory nil nil ".org")))
     ,my/generic-note-template
     :empty-lines 1 :prepend t)))
#+END_SRC

* ACTIVE Babel Configuration
Settings for Org Babel code execution. Currently enables shell blocks; expand here for future languages (e.g., Python, Emacs Lisp) without creating a new file unless it grows excessively.

#+BEGIN_SRC emacs-lisp
;; Enable bash/shell for general-purpose code execution
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (latex . t)))


;; Add future Babel settings here, e.g.:
;; (setq org-confirm-babel-evaluate nil) ;; No confirmation for code evaluation
;; (org-babel-do-load-languages 'org-babel-load-languages '((python . t) (emacs-lisp . t)))
#+END_SRC
