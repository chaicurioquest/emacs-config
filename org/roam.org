# SETUPFILE: /wspace/org/setup/setup-latex.org
#+TITLE: Org-Roam Zettelkasten Configuration
#+TODO: ACTIVE | CANCELLED
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+DATE: 2025-07-12
#+CREATED: %U
#+LAST_MODIFIED: [2025-08-10 Sun 16:50]

** Purpose
Configure org-roam for Zettelkasten note-taking with unique IDs, backlinks, dailies, and dynamic tags from .filetags via my-org-read-filetags in org/filetags.org. Designed to be:
- **Future-proof**: Structured with comments and tables for easy updates.
- **Reliable**: Reproducible via straight.el with error handling and db autosync.
- **Minimal**: Lightweight setup with essential keybindings, no external dependencies beyond org-roam.
- **Portable**: Works on laptop (system-name: ram), Termux, tablet via device-aware paths.
- **Synced**: ~/.emacs.d/ and notes synced via GitHub[](https://github.com/chaicurioquest/emacs-config) and Syncthing.
- **Integrated**: Uses my-org-read-filetags for tag completion (shared with yankpad snippets), integrates with Zotero via org-roam-bibtex/Citar for bib notes, and Org-noter for PDF annotations.

Tangle with `C-c t` or `M-x my-tangle-config-org`.

* My Org-Roam Workflow                                             :workflow:
| Workflow              | Solution                             | Notes                                                         | Device   | Keybindings                                       |
|-----------------------|--------------------------------------|---------------------------------------------------------------|----------|-------------------------------------------------  |
| Find existing note    | org-roam-node-find                   | Search notes by title/ID/tags; Vertico completion             | All      | C-c r f                                           |
| Insert link to note   | org-roam-node-insert                 | Link to another note (backlinks auto-created)                 | All      | C-c r i                                           |
| Capture new note      | org-roam-capture                     | Create notes with templates (default, fleeting, permanent, journal, bibliography) | All | C-c r n                            |
| Dailies capture       | org-roam-dailies-capture-today       | Daily notes with templates; auto-timestamped                  | All      | C-c r d                                           |
| Navigate dailies      | org-roam-dailies-goto-*              | Jump to today/previous/next/specific date                     | All      | C-c r T (today), P (previous), N (next), D (date) |
| Bibliography notes    | org-roam-bibtex (with Citar)         | Create notes from Zotero refs; integrates with Org-noter for annotations | All   | C-c r c (via Citar open/create)           |
| Tag notes             | my-org-roam-tag-add / my-org-roam-tag-remove | Dynamic tags from filetags.org; Vertico completion    | All      | C-c r t (add), r (remove)                         |
| View backlinks        | org-roam-buffer-toggle               | Displays backlinks, references in side buffer                 | All      | C-c r b                                           |
| View graph            | org-roam-ui                          | Interactive graph UI (on laptop)                              | Laptop   | C-c r g                                           |  

#+BEGIN_SRC emacs-lisp
;; Use id: links when interactively inserting links
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive) 
#+END_SRC

* ACTIVE Org-roam Setup
#+BEGIN_SRC emacs-lisp

;; Helper Function for Template Preloading ${setupfile} for setup-latex file path in template
(defun my/load-template (filename)
  "Load template FILENAME from user-emacs-directory and replace ${setupfile} with absolute repo path."
  (let ((template-path (expand-file-name filename user-emacs-directory)))
    (if (file-exists-p template-path)
        (with-temp-buffer
          (insert-file-contents template-path)
          (goto-char (point-min))
          (while (search-forward "${setupfile}" nil t)
            (replace-match (expand-file-name "setup/setup-latex.org" (expand-file-name "" default-directory)) t t))
          (buffer-string))
      (message "Template %s not found; using fallback." template-path)
      "* Default Note\n:PROPERTIES:\n:ID: %^{id-or-auto}\n:END:\n%?\n- %U")))

(use-package org-roam
  :straight t
  :init
  ;; Set org-roam-directory relative to the default-directory (user device-aware)
    (setq org-roam-directory (expand-file-name "notes/roam" default-directory))
   
  ;; dailies inside roam/
    (setq org-roam-dailies-directory (expand-file-name "daily" org-roam-directory))

  ;; allow completion/insert everywhere (so you can insert roam nodes in top-level notes)
  (setq org-roam-completion-everywhere t)

  ;; Delay autosync slightly to avoid DB race on startup and print
  (run-with-idle-timer 2 nil
    (lambda ()
      (when (require 'org-roam nil 'noerror)
     (unless (bound-and-true-p my/org-roam-initialized)
       (setq my/org-roam-initialized t)
       (org-roam-db-autosync-mode 1)
       (message "âœ… org-roam initialized and DB autosync enabled.")))))

  ;; (setq org-roam-v2-ack t org-roam-completion-everywhere t)

  ;; Debugging paths
  (message "âœ… Org-roam dir: %s" org-roam-directory)
  (message "ðŸ“… Dailies dir: %s" org-roam-dailies-directory)
  (message "Default dir: %s" default-directory)

:bind
    (("C-c r f" . org-roam-node-find)
     ("C-c r i" . org-roam-node-insert)
     ("C-c r n" . org-roam-capture)

     ;; Dailies
     ("C-c r d" . org-roam-dailies-capture-today)
     ("C-c r T" . org-roam-dailies-goto-today)
     ("C-c r P" . org-roam-dailies-goto-previous-note)
     ("C-c r N" . org-roam-dailies-goto-next-note)
     ("C-c r D" . org-roam-dailies-goto-date)

     ;; Tag management
     ("C-c r t" . my-org-roam-tag-add)
     ("C-c r r" . my-org-roam-tag-remove))

  :config
  ;; ensure roam dirs exist (optional but low-cost)
    (dolist (d (list org-roam-directory org-roam-dailies-directory))
    (unless (file-directory-p d) (make-directory d t)))

  ;;(org-roam-db-autosync-mode 1)
  ;;(message "âœ… org-roam initialized and DB autosync enabled.")
  )

 
  ;;;; To avoid org roam DB race condition error "wrong-type-argument sqlitep nil"
  ;;(defun my/org-roam-safe-rebuild ()
  ;;"Disable autosync, rebuild org-roam DB, then re-enable autosync (delayed)."
  ;;(interactive)
  ;;;; 1. Disable autosync if running
  ;;(when (bound-and-true-p org-roam-db-autosync-mode)
  ;;  (org-roam-db-autosync-mode -1)
  ;;  (message "org-roam autosync disabled temporarily"))
  ;;;; 2. Rebuild DB
  ;;(org-roam-db-build-cache t)
  ;;(message "org-roam DB rebuild complete")
  ;;;; 3. Re-enable autosync after idle
  ;;(run-with-idle-timer
  ;; 2 nil
  ;; (lambda ()
  ;;   (org-roam-db-autosync-mode 1)
  ;;   (message "org-roam autosync re-enabled (delayed)"))))

;; Used eval with progn to evaluate multiple setq forms and resolve stringp error by ensuring paths are strings
(setq org-roam-capture-templates
        `(("d" "default" plain
           ,(my/load-template "template/roam-default.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
           :unnarrowed t)
          ("f" "fleeting" plain
           ,(my/load-template "template/roam-fleeting.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
           :unnarrowed t)
          ("p" "permanent" plain
           ,(my/load-template "template/roam-permanent.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
           :unnarrowed t)
          ("j" "journal" plain
           ,(my/load-template "template/roam-journal.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
           :unnarrowed t)
          ("b" "bibliography" plain
           ,(my/load-template "template/roam-bib.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${citekey}.org" "")
           :unnarrowed t)))

;; Daily Templates
  (setq org-roam-dailies-capture-templates
        `(("d" "default" plain
           ,(my/load-template "template/roam-dailies.org")
           :if-new (file+head "%<%Y-%m-%d>.org" "")
           :empty-lines 1
           :prepend t
           :unnarrowed t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-roam-bibtex
  :straight t
  :after (org-roam citar)
  :init
  (setq org-roam-bibtex-template-key "b")
  :config
  (setq orb-bibliography org-cite-global-bibliography
        orb-preformat-keywords '("title" "url" "author-or-editor" "keywords" "year" "doi" "journal")
        orb-process-file-keywords t
        orb-attached-file-extensions '("pdf"))

  (setq orb-templates
        `(("b" "bibliography" plain
           ,(my/load-template "template/roam-bib.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${citekey}.org" "")
           :unnarrowed t)))

  (add-hook 'org-mode-hook #'org-roam-bibtex-mode))
#+END_SRC

* Org-roam UI (Graph)
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :if (eq my-device 'laptop)
  :straight (:host github :repo "org-roam/org-roam-ui" :branch "main")
  :bind (("C-c r g" . org-roam-ui-open))
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+END_SRC

* Helper: Add Tag via Filetags Completion
#+BEGIN_SRC emacs-lisp
(defun my-org-roam-tag-add ()
  "Add a tag to the current org-roam node with completion."
  (interactive)
  (let* ((all-tags (my-org-read-filetags))
         (completion-function
          (if (and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
              (lambda (prompt coll) (ivy-completing-read prompt coll nil t))
            'completing-read))
         (selected-tag (funcall completion-function "Select tag: " all-tags)))
    (when selected-tag
      (org-roam-tag-add (list selected-tag)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-roam-tag-remove ()
  "Remove a tag from the current org-roam node with completion."
  (interactive)
  (let* ((current-tags (org-roam-node-tags (org-roam-node-at-point)))
         (completion-function
          (if (and (eq my-device 'laptop) (fboundp 'ivy-completing-read))
              (lambda (prompt coll) (ivy-completing-read prompt coll nil t))
            'completing-read))
         (selected-tag (funcall completion-function "Remove tag: " current-tags)))
    (when selected-tag
      (org-roam-tag-remove (list selected-tag)))))
#+END_SRC
